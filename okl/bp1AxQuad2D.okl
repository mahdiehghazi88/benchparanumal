/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

#if KERNEL_NUMBER==0
@kernel void bp1AxQuad2D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  cubwJ,
                        @restrict const  dfloat *  I,
                        @restrict const  dfloat *  MM,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){

  for(int eo=0;eo<Nelements;eo+=p_NelementsPerBlk*p_NelementsPerThd;@outer(0)){

    @shared dfloat s_I [p_cubNq][p_Nq];
    @shared dfloat s_q[p_NelementsPerThd][p_NelementsPerBlk][p_cubNq][p_cubNq];

    @exclusive dlong element[p_NelementsPerThd];

    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){

          //load operators
          if(es==0){
            if(i<p_Nq){
              const int id = j*p_Nq+i;
              const dfloat Iji = I[id];
              s_I[j][i] = Iji;
            }
          }

          for (int ek=0;ek<p_NelementsPerThd;++ek) {
            const dlong e = eo+es*p_NelementsPerThd+ek;
            if(e<Nelements) {
              element[ek] = elementList[e];
              if (i<p_Nq && j<p_Nq) {
                const dlong id = GlobalToLocal[i + j*p_Nq + element[ek]*p_Np];
                s_q[ek][es][j][i] = (id!=-1) ? q[id] : 0.0;
              }
            } else {
              element[ek] = -1;
            }
          }
        }
      }
    }

    @exclusive dfloat Iq[p_NelementsPerThd];

    // interpolate in 'r'
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){

            for(int s=0;s<p_NelementsPerThd;++s)
              Iq[s] = 0;

            // #pragma unroll p_Nq
            for(int m=0;m<p_Nq;++m){
              dfloat Iim = s_I[i][m];

              // #pragma unroll p_NelementsPerThd
              for(int s=0;s<p_NelementsPerThd;++s){
                Iq[s] += Iim*s_q[s][es][j][m];
              }
            }
          }
        }
      }
    }

    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          for(int s=0;s<p_NelementsPerThd;++s){
            s_q[s][es][j][i] = Iq[s];
          }
        }
      }
    }

    // interpolate in 's'
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){

          dfloat GWJ[p_NelementsPerThd];

          // #pragma unroll p_NelementsPerThd
          for(int ek=0;ek<p_NelementsPerThd;++ek){
            if(element[ek]>-1){
              const dlong gbase = element[ek]*p_cubNp + i + j*p_cubNq;
              GWJ[ek] = cubwJ[gbase];
            }
          }

          for(int s=0;s<p_NelementsPerThd;++s)
            Iq[s] = 0;

          // #pragma unroll p_Nq
          for(int m=0;m<p_Nq;++m){
            dfloat Iim = s_I[j][m];

            // #pragma unroll p_NelementsPerThd
            for(int s=0;s<p_NelementsPerThd;++s){
              Iq[s] += Iim*s_q[s][es][m][i];
            }
          }

          for(int ek=0;ek<p_NelementsPerThd;++ek){
            Iq[ek] *= GWJ[ek];
          }
        }
      }
    }

    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          for(int s=0;s<p_NelementsPerThd;++s){
            s_q[s][es][j][i] = Iq[s];
          }
        }
      }
    }

    // test in 's'
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){

            for(int s=0;s<p_NelementsPerThd;++s)
              Iq[s] = 0;

            // #pragma unroll p_cubUnr
            for(int m=0;m<p_cubNq;++m){
              const dfloat Imj = s_I[m][j];
              // #pragma unroll p_NelementsPerThd
              for(int s=0;s<p_NelementsPerThd;++s){
                Iq[s] += Imj*s_q[s][es][m][i];
              }
            }
          }
        }
      }
    }

    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          for(int s=0;s<p_NelementsPerThd;++s){
            s_q[s][es][j][i] = Iq[s];
          }
        }
      }
    }

    // test in 'r'
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(i<p_Nq && j<p_Nq){

            for(int s=0;s<p_NelementsPerThd;++s)
              Iq[s] = 0;

            // #pragma unroll p_cubUnr
            for(int m=0;m<p_cubNq;++m){
              const dfloat Imj = s_I[m][i];
              // #pragma unroll p_NelementsPerThd
              for(int s=0;s<p_NelementsPerThd;++s){
                Iq[s] += Imj*s_q[s][es][j][m];
              }
            }

            // #pragma unroll p_NelementsPerThd
            for(int ek=0;ek<p_NelementsPerThd;++ek){
              if(element[ek]>-1){
                const dlong base = i + j*p_Nq + element[ek]*p_Np;
                Aq[base] = Iq[ek];
              }
            }
          }
        }
      }
    }
  }
}
#endif

#if KERNEL_NUMBER==1

//padding for bank conflicts
#define p_pad 1

/*MFMA 4x4*/
@kernel void bp1AxQuad2D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  cubwJ,
                        @restrict const  dfloat *  I,
                        @restrict const  dfloat *  MM,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){

  for(int eo=0;eo<Nelements;eo+=p_NelementsPerThd;@outer(0)){

    @shared dfloat s_I [16][16+1];
    @shared dfloat  s_q[p_NelementsPerThd][16][16+p_pad];

    @exclusive dlong element[p_NelementsPerThd];

    for(int j=0;j<16;++j;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){

        //load operators
        s_I[j][i] = (i<p_Nq && j<p_cubNq) ? I[j*p_Nq+i] : 0.0;

        for (int et=0;et<p_NelementsPerThd;++et) {
          const dlong e = eo+et;
          if(e<Nelements) {
            element[et] = elementList[e];
            const dlong id = (i<p_Nq && j<p_Nq) ? GlobalToLocal[i + j*p_Nq + element[et]*p_Np] : -1;
            s_q[et][j][i] = (id!=-1) ? q[id] : 0.0;
          } else {
            element[et] = -1;
            s_q[et][j][i] = 0.0;
          }
        }
      }
    }

    @exclusive dfloat Iq[p_NelementsPerThd];

    // interpolate in 'r'
    for(int j=0;j<16;++j;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){

        for(int s=0;s<p_NelementsPerThd;++s)
          Iq[s] = 0;

        for (int m=0;m<p_Nq;m+=4) {
          const dfloat r_I = s_I[i][m+(j%4)]; //replicated 16 columns and 4 rows of I in each wave

          for (int et=0;et<p_NelementsPerThd;++et) {
            const dfloat r_q = s_q[et][(i%4)+4*(j/4)][m+(j%4)]; //replicated 4x4 matrix of dofs
            Iq[et] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_q, r_I, Iq[et], 0, 0, 0);
          }
        }
      }
    }

    for(int j=0;j<16;++j;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){
        for(int s=0;s<p_NelementsPerThd;++s){
          s_q[s][j][i] = Iq[s];
        }
      }
    }

    // interpolate in 's'
    for(int j=0;j<16;++j;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){

        dfloat GWJ[p_NelementsPerThd];

        // #pragma unroll p_NelementsPerThd
        for(int et=0;et<p_NelementsPerThd;++et){
          if(element[et]>-1 && i<p_cubNq && j<p_cubNq){
            const dlong gbase = element[et]*p_cubNp + i + j*p_cubNq;
            GWJ[et] = cubwJ[gbase];
          } else {
            GWJ[et] = 0.0;
          }
        }

        for(int s=0;s<p_NelementsPerThd;++s)
          Iq[s] = 0;

        for (int m=0;m<p_Nq;m+=4) {
          const dfloat r_I = s_I[i%4+4*(j/4)][m+j%4];//replicated 4x4 submatrix of I

          for (int et=0;et<p_NelementsPerThd;++et) {
            const dfloat r_q = s_q[et][m+j%4][i]; //replicated 16 x-slices and 4 y-slices of q in each wave
            Iq[et] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_I, r_q, Iq[et], 0, 0, 0);
          }
        }

        for(int et=0;et<p_NelementsPerThd;++et){
          Iq[et] *= GWJ[et];
        }
      }
    }

    for(int j=0;j<16;++j;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){
        for(int s=0;s<p_NelementsPerThd;++s){
          s_q[s][j][i] = Iq[s];
        }
      }
    }

    // test in 's'
    for(int j=0;j<16;++j;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){

        for(int s=0;s<p_NelementsPerThd;++s)
          Iq[s] = 0;

        for (int m=0;m<p_cubNq;m+=4) {
          const dfloat r_I = s_I[m+j%4][i%4+4*(j/4)];

          for (int et=0;et<p_NelementsPerThd;++et) {
            const dfloat r_q = s_q[et][m+j%4][i];
            Iq[et] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_I, r_q, Iq[et], 0, 0, 0);
          }
        }
      }
    }

    for(int j=0;j<16;++j;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){
        for(int s=0;s<p_NelementsPerThd;++s){
          s_q[s][j][i] = Iq[s];
        }
      }
    }

    // test in 'r'
    for(int j=0;j<16;++j;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){

        for(int s=0;s<p_NelementsPerThd;++s)
          Iq[s] = 0;

        for (int m=0;m<p_cubNq;m+=4) {
          const dfloat r_I = s_I[m+j%4][i];

          for (int et=0;et<p_NelementsPerThd;++et) {
            const dfloat r_q = s_q[et][i%4+4*(j/4)][m+j%4];
            Iq[et] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_q, r_I, Iq[et], 0, 0, 0);
          }
        }

        if(i<p_Nq && j<p_Nq){
          for(int et=0;et<p_NelementsPerThd;++et){
            if(element[et]>-1){
              const dlong base = i + j*p_Nq + element[et]*p_Np;
              Aq[base] = Iq[et];
            }
          }
        }
      }
    }
  }
}
#endif
