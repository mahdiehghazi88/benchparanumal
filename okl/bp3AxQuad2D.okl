/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

#if KERNEL_NUMBER==0
@kernel void bp3AxQuad2D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  cubwJ,
                        @restrict const  dfloat *  cubggeo,
                        @restrict const  dfloat *  D,
                        @restrict const  dfloat *  I,
                        @restrict const  dfloat *  invV,
                        @restrict const  dfloat *  S,
                        @restrict const  dfloat *  MM,
                        const dfloat lambda,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){

  for(int eo=0;eo<Nelements;eo+=p_NelementsPerBlk*p_NelementsPerThd;@outer(0)){

    @shared dfloat s_D [p_cubNq][p_cubNq];
    @shared dfloat s_I [p_cubNq][p_cubNq];
    @shared dfloat   s_q[p_NelementsPerThd][p_NelementsPerBlk][p_cubNq][p_cubNq];
    @shared dfloat s_Gqr[p_NelementsPerThd][p_NelementsPerBlk][p_cubNq][p_cubNq];
    @shared dfloat s_Gqs[p_NelementsPerThd][p_NelementsPerBlk][p_cubNq][p_cubNq];

    @exclusive dlong element[p_NelementsPerThd];

    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){

          //load operators
          if(es==0){
            const int id = j*p_cubNq+i;
            const dfloat Dji = D[id];
            s_D[j][i] = Dji;

            if(i<p_Nq){
              const int id = j*p_Nq+i;
              const dfloat Iji = I[id];
              s_I[j][i] = Iji;
            }
          }

          for (int et=0;et<p_NelementsPerThd;++et) {
            if(eo+es*p_NelementsPerThd+et<Nelements) {
              element[et] = elementList[eo+es*p_NelementsPerThd+et];
              const dlong id = (i<p_Nq && j<p_Nq) ? GlobalToLocal[i + j*p_Nq + element[et]*p_Np] : -1;
              s_q[et][es][j][i] = (id!=-1) ? q[id] : 0.0;
            } else {
              element[et] = -1;
            }
          }
        }
      }
    }

    // interpolate in 'r'
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){

            dfloat tmp[p_NelementsPerThd] = {0.};

            // #pragma unroll p_Nq
            for(int m=0;m<p_Nq;++m){
              dfloat Iim = s_I[i][m];

              // #pragma unroll p_NelementsPerThd
              for(int s=0;s<p_NelementsPerThd;++s){
                tmp[s] += Iim*s_q[s][es][j][m];
              }
            }

            for(int s=0;s<p_NelementsPerThd;++s){
              s_Gqr[s][es][j][i] = tmp[s];
            }
          }
        }
      }
    }

    // interpolate in 's'
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){

          dfloat tmp[p_NelementsPerThd] = {0.};

          // #pragma unroll p_Nq
          for(int m=0;m<p_Nq;++m){
            dfloat Iim = s_I[j][m];

            // #pragma unroll p_NelementsPerThd
            for(int s=0;s<p_NelementsPerThd;++s){
              tmp[s] += Iim*s_Gqr[s][es][m][i];
            }
          }

          for(int s=0;s<p_NelementsPerThd;++s){
            s_q[s][es][j][i] = tmp[s];
          }
        }
      }
    }

    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){

          dfloat G00[p_NelementsPerThd];
          dfloat G01[p_NelementsPerThd];
          dfloat G11[p_NelementsPerThd];

          for(int et=0;et<p_NelementsPerThd;++et){
            if(element[et]>-1){
              const dlong gbase = element[et]*p_cubNp + i + j*p_cubNq;
              G00[et] = cubggeo[p_Nggeo*gbase+p_G00ID];
              G01[et] = cubggeo[p_Nggeo*gbase+p_G01ID];
              G11[et] = cubggeo[p_Nggeo*gbase+p_G11ID];
            }
          }

          // 'r' terms
          dfloat qr[p_NelementsPerThd] = {0.0};
          for(int m = 0; m < p_cubNq; ++m) {
            const dfloat Dim = s_D[i][m];

            // #pragma unroll p_NelementsPerThd
            for(int s=0;s<p_NelementsPerThd;++s){
              qr[s] += Dim*s_q[s][es][j][m];
            }
          }

          // 's' terms
          dfloat qs[p_NelementsPerThd] = {0.0};
          for(int m = 0; m < p_cubNq; ++m) {
            const dfloat Djm = s_D[j][m];

            // #pragma unroll p_NelementsPerThd
            for(int s=0;s<p_NelementsPerThd;++s){
              qs[s] += Djm*s_q[s][es][m][i];
            }
          }

          for(int et=0;et<p_NelementsPerThd;++et){
            s_Gqr[et][es][j][i] = G00[et]*qr[et] + G01[et]*qs[et];
            s_Gqs[et][es][j][i] = G01[et]*qr[et] + G11[et]*qs[et];
          }
        }
      }
    }

    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){

          dfloat tmpAp[p_NelementsPerThd] = {0.};

          for(int et=0;et<p_NelementsPerThd;++et){
            if(element[et]>-1){
              const dfloat GWJ = cubwJ[element[et]*p_cubNp + i + j*p_cubNq];
              tmpAp[et] = s_q[et][es][j][i]*lambda*GWJ;
            }
          }

          for(int m=0;m<p_cubNq;++m){
            const dfloat Dmi = s_D[m][i];

            // #pragma unroll p_NelementsPerThd
            for(int s=0;s<p_NelementsPerThd;++s){
              tmpAp[s] += Dmi*s_Gqr[s][es][j][m];
            }
          }

          for(int m=0;m<p_cubNq;++m){
            const dfloat Dmj = s_D[m][j];

            // #pragma unroll p_NelementsPerThd
            for(int s=0;s<p_NelementsPerThd;++s){
              tmpAp[s] += Dmj*s_Gqs[s][es][m][i];
            }
          }

          for(int s=0;s<p_NelementsPerThd;++s){
            s_q[s][es][j][i] = tmpAp[s];
          }
        }
      }
    }

    // test in 's'
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){

            dfloat tmp[p_NelementsPerThd] = {0.};

            // #pragma unroll p_cubUnr
            for(int m=0;m<p_cubNq;++m){
              const dfloat Imj = s_I[m][j];
              // #pragma unroll p_NelementsPerThd
              for(int s=0;s<p_NelementsPerThd;++s){
                tmp[s] += Imj*s_q[s][es][m][i];
              }
            }

            for(int s=0;s<p_NelementsPerThd;++s){
              s_Gqr[s][es][j][i] = tmp[s];
            }
          }
        }
      }
    }

    // test in 'r'
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(i<p_Nq && j<p_Nq){

            dfloat tmp[p_NelementsPerThd] = {0.};

            // #pragma unroll p_cubUnr
            for(int m=0;m<p_cubNq;++m){
              const dfloat Imj = s_I[m][i];
              // #pragma unroll p_NelementsPerThd
              for(int s=0;s<p_NelementsPerThd;++s){
                tmp[s] += Imj*s_Gqr[s][es][j][m];
              }
            }

            // #pragma unroll p_NelementsPerThd
            for(int et=0;et<p_NelementsPerThd;++et){
              if(element[et]>-1){
                const dlong base = i + j*p_Nq + element[et]*p_Np;
                Aq[base] = tmp[et];
              }
            }
          }
        }
      }
    }
  }
}
#endif

#if KERNEL_NUMBER==1
/*MFMA 4x4*/

//padding for bank conflicts
#define p_pad 1

@kernel void bp3AxQuad2D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  cubwJ,
                        @restrict const  dfloat *  cubggeo,
                        @restrict const  dfloat *  D,
                        @restrict const  dfloat *  I,
                        @restrict const  dfloat *  invV,
                        @restrict const  dfloat *  S,
                        @restrict const  dfloat *  MM,
                        const dfloat lambda,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){

  for(int eo=0;eo<Nelements;eo+=p_NelementsPerThd;@outer(0)){

    @shared dfloat s_D[16][16+p_pad];
    @shared dfloat s_I[16][16+p_pad];
    @shared dfloat   s_q[p_NelementsPerThd][16][16+p_pad];
    @shared dfloat s_Gqr[p_NelementsPerThd][16][16+p_pad];
    @shared dfloat s_Gqs[p_NelementsPerThd][16][16+p_pad];

    @exclusive dlong element[p_NelementsPerThd];

    for(int j=0;j<16;++j;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){

        //load operator
        s_D[j][i] = (i<p_cubNq && j<p_cubNq) ? D[p_Nq*j+i] : 0.0;
        s_I[j][i] = (i<p_Nq && j<p_cubNq) ? I[p_Nq*j+i] : 0.0;

        for (int et=0;et<p_NelementsPerThd;++et) {
          const dlong e = eo + et;
          if(e<Nelements) {
            element[et] = elementList[e];
            const dlong id = (i<p_Nq && j<p_Nq) ? GlobalToLocal[i + j*p_Nq + element[et]*p_Np] : -1;
            s_q[et][j][i] = (id!=-1) ? q[id] : 0.0;
          } else {
            element[et] = -1;
            s_q[et][j][i] = 0.0;
          }
        }
      }
    }

    // interpolate in 'r'
    for(int j=0;j<16;++j;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){
        dfloat tmp[p_NelementsPerThd] = {0.};

        for (int m=0;m<p_Nq;m+=4) {
          const dfloat r_I = s_I[i][m+(j%4)]; //replicated 16 columns and 4 rows of V in each wave

          for (int et=0;et<p_NelementsPerThd;++et) {
            const dfloat r_q = s_q[et][(i%4)+4*(j/4)][m+(j%4)]; //replicated 4x4 matrix of dofs
            tmp[et] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_q, r_I, tmp[et], 0, 0, 0);
          }
        }

        for(int s=0;s<p_NelementsPerThd;++s){
          s_Gqr[s][j][i] = tmp[s];
        }
      }
    }

    // interpolate in 's'
    for(int j=0;j<16;++j;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){

        dfloat tmp[p_NelementsPerThd] = {0.};

        for (int m=0;m<p_Nq;m+=4) {
          const dfloat r_I = s_I[i%4+4*(j/4)][m+j%4];//replicated 4x4 submatrix of M

          for (int et=0;et<p_NelementsPerThd;++et) {
            const dfloat r_q = s_Gqr[et][m+j%4][i]; //replicated 16 x-slices and 4 y-slices of q in each wave
            tmp[et] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_I, r_q, tmp[et], 0, 0, 0);
          }
        }

        for(int s=0;s<p_NelementsPerThd;++s){
          s_q[s][j][i] = tmp[s];
        }
      }
    }

    for(int j=0;j<16;++j;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){

        dfloat G00[p_NelementsPerThd];
        dfloat G01[p_NelementsPerThd];
        dfloat G11[p_NelementsPerThd];

        if (i<p_cubNq && j<p_cubNq) {
          for(int et=0;et<p_NelementsPerThd;++et){
            if(element[et]>-1){
              const dlong gbase = element[et]*p_cubNp + i + j*p_cubNq;
              G00[et] = cubggeo[p_Nggeo*gbase+p_G00ID];
              G01[et] = cubggeo[p_Nggeo*gbase+p_G01ID];
              G11[et] = cubggeo[p_Nggeo*gbase+p_G11ID];
            }
          }
        }

        // 'r' terms
        dfloat qr[p_NelementsPerThd] = {0.0};
        for (int m=0;m<p_cubNq;m+=4) {
          const dfloat r_D = s_D[i][m+(j%4)]; //replicated 16 columns and 4 rows of D in each wave

          for (int et=0;et<p_NelementsPerThd;++et) {
            const dfloat r_q = s_q[et][(i%4)+4*(j/4)][m+(j%4)]; //replicated 4x4 matrix of dofs
            qr[et] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_q, r_D, qr[et], 0, 0, 0);
          }
        }

        // 's' terms
        dfloat qs[p_NelementsPerThd] = {0.0};
        for (int m=0;m<p_cubNq;m+=4) {
          const dfloat r_D = s_D[i%4+4*(j/4)][m+j%4];//replicated 4x4 submatrix of M

          for (int et=0;et<p_NelementsPerThd;++et) {
            const dfloat r_q = s_q[et][m+j%4][i]; //replicated 16 x-slices and 4 y-slices of q in each wave
            qs[et] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_D, r_q, qs[et], 0, 0, 0);
          }
        }

        for(int et=0;et<p_NelementsPerThd;++et){
          s_Gqr[et][j][i] = G00[et]*qr[et] + G01[et]*qs[et];
          s_Gqs[et][j][i] = G01[et]*qr[et] + G11[et]*qs[et];
        }
      }
    }

    for(int j=0;j<16;++j;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){

        dfloat GWJ[p_NelementsPerThd];
        // #pragma unroll p_NelementsPerThd
        if (i<p_cubNq && j<p_cubNq) {
          for(int et=0;et<p_NelementsPerThd;++et){
            if(element[et]>-1){
              GWJ[et] = cubwJ[element[et]*p_cubNp + i + j*p_cubNq];
            }
          }
        }

        dfloat tmpAp[p_NelementsPerThd] = {0.};

        for (int m=0;m<p_cubNq;m+=4) {
          const dfloat r_D = s_D[m+(j%4)][i]; //replicated 16 columns and 4 rows of D in each wave

          for (int et=0;et<p_NelementsPerThd;++et) {
            const dfloat r_q = s_Gqr[et][(i%4)+4*(j/4)][m+(j%4)]; //replicated 4x4 matrix of dofs
            tmpAp[et] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_q, r_D, tmpAp[et], 0, 0, 0);
          }
        }

        for (int m=0;m<p_cubNq;m+=4) {
          const dfloat r_D = s_D[m+j%4][i%4+4*(j/4)];//replicated 4x4 submatrix of D

          for (int et=0;et<p_NelementsPerThd;++et) {
            const dfloat r_q = s_Gqs[et][m+j%4][i]; //replicated 16 x-slices and 4 y-slices of q in each wave
            tmpAp[et] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_D, r_q, tmpAp[et], 0, 0, 0);
          }
        }

        for(int et=0;et<p_NelementsPerThd;++et){
          tmpAp[et] += s_q[et][j][i]*lambda*GWJ[et];
        }

        for(int s=0;s<p_NelementsPerThd;++s){
          s_q[s][j][i] = tmpAp[s];
        }
      }
    }

    // test in 's'
    for(int j=0;j<16;++j;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){

        dfloat tmp[p_NelementsPerThd] = {0.};
        for (int m=0;m<p_cubNq;m+=4) {
          const dfloat r_I = s_I[m+j%4][i%4+4*(j/4)];//replicated 4x4 submatrix of D

          for (int et=0;et<p_NelementsPerThd;++et) {
            const dfloat r_q = s_q[et][m+j%4][i]; //replicated 16 x-slices and 4 y-slices of q in each wave
            tmp[et] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_I, r_q, tmp[et], 0, 0, 0);
          }
        }

        for(int s=0;s<p_NelementsPerThd;++s){
          s_Gqr[s][j][i] = tmp[s];
        }
      }
    }

    // test in 'r'
    for(int j=0;j<16;++j;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){

        dfloat tmp[p_NelementsPerThd] = {0.};
        for (int m=0;m<p_cubNq;m+=4) {
          const dfloat r_I = s_I[m+(j%4)][i]; //replicated 16 columns and 4 rows of V in each wave

          for (int et=0;et<p_NelementsPerThd;++et) {
            const dfloat r_q = s_Gqr[et][(i%4)+4*(j/4)][m+(j%4)]; //replicated 4x4 matrix of dofs
            tmp[et] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_q, r_I, tmp[et], 0, 0, 0);
          }
        }

        if (i<p_Nq && j<p_Nq) {
          // #pragma unroll p_NelementsPerThd
          for(int et=0;et<p_NelementsPerThd;++et){
            if(element[et]>-1){
              const dlong base = i + j*p_Nq + element[et]*p_Np;
              Aq[base] = tmp[et];
            }
          }
        }
      }
    }
  }
}
#endif
