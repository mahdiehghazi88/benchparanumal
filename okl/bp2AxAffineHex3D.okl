/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

#if KERNEL_NUMBER==0
/*Layer by layer with q in shmem*/

//padding for bank conflicts
#if p_Nq==16
#define p_pad 1
#else
#define p_pad 0
#endif


@kernel void bp2AxAffineHex3D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  wJ,
                        @restrict const  dfloat *  I,
                        @restrict const  dfloat *  MM,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){


  for(dlong eo=0; eo<Nelements; eo+=p_NelementsPerBlk; @outer(0)){

    @shared dfloat s_MM[p_Nq][p_Nq+p_pad];
    @shared dfloat s_q[p_Nq][p_Nfields][p_NelementsPerBlk][p_Nq][p_Nq+p_pad];

    @exclusive dlong r_e, element;

    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          if(es==0)
            s_MM[j][i] = MM[i+p_Nq*j];

          r_e = eo + es;

          if(r_e<Nelements) {
            element = elementList[r_e];
            const dfloat J = wJ[element];

            // load pencil of u into register
            const dlong base = i + j*p_Nq + element*p_Np*p_Nfields;

            // #pragma unroll p_Nq
            for(int f=0;f<p_Nfields;++f) {
              for(int k=0;k<p_Nq;++k) {
                const dlong id = GlobalToLocal[base + k*p_Nq*p_Nq + f*p_Np];
                s_q[k][f][es][j][i] = (id!=-1) ? J*q[id] : 0.0;
              }
            }
          }
        }
      }
    }

    // multiply by M in 'r'
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int k=0;k<p_Nq;++k;@inner(1)){
        for(int j=0;j<p_Nq;++j;@inner(0)){

          dfloat r_q[p_Nfields][p_Nq];

          // #pragma unroll p_Nq
          for(int i=0;i<p_Nq;++i) {
            for(int f=0;f<p_Nfields;++f) {
              r_q[f][i] = s_q[k][f][es][j][i];
            }
          }

          // #pragma unroll p_Nq
          for(int i=0;i<p_Nq;++i){

            dfloat Mq[p_Nfields] = {0.};

            // #pragma unroll p_Nq
            for(int m=0;m<p_Nq;++m){
              const dfloat Mi = s_MM[m][i];
              for(int f=0;f<p_Nfields;++f) {
                Mq[f] += Mi*r_q[f][m];
              }
            }

            for(int f=0;f<p_Nfields;++f) {
              s_q[k][f][es][j][i] = Mq[f]; // ok since only this thread
            }
          }
        }
      }
    }

    // multiply by M in 's'
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int k=0;k<p_Nq;++k;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          dfloat r_q[p_Nfields][p_Nq];

          // #pragma unroll p_Nq
          for(int j=0;j<p_Nq;++j) {
            for(int f=0;f<p_Nfields;++f) {
              r_q[f][j] = s_q[k][f][es][j][i];
            }
          }

          // #pragma unroll p_Nq
          for(int j=0;j<p_Nq;++j){

            dfloat Mq[p_Nfields] = {0.};

            // #pragma unroll p_Nq
            for(int m=0;m<p_Nq;++m){
              const dfloat Mj = s_MM[m][j];
              for(int f=0;f<p_Nfields;++f) {
                Mq[f] += Mj*r_q[f][m];
              }
            }

            for(int f=0;f<p_Nfields;++f) {
              s_q[k][f][es][j][i] = Mq[f]; // ok since only this thread
            }
          }
        }
      }
    }

    // multiply by M in 't'
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          if (r_e<Nelements) {

            dfloat r_q[p_Nfields][p_Nq];

            // #pragma unroll p_Nq
            for(int k=0;k<p_Nq;++k) {
              for(int f=0;f<p_Nfields;++f) {
                r_q[f][k] = s_q[k][f][es][j][i];
              }
            }

            // #pragma unroll p_Nq
            for(int k=0;k<p_Nq;++k){

              dfloat Mq[p_Nfields] = {0.};

              // #pragma unroll p_Nq
              for(int m=0;m<p_Nq;++m){
                const dfloat Mk = s_MM[m][k];
                for(int f=0;f<p_Nfields;++f) {
                  Mq[f] += Mk*r_q[f][m];
                }
              }

              for(int f=0;f<p_Nfields;++f) {
                Aq[element*p_Np*p_Nfields+f*p_Np+k*p_Nq*p_Nq+j*p_Nq+i] = Mq[f];
              }
            }
          }
        }
      }
    }
  }
}
#endif


#if KERNEL_NUMBER==1
/*Layer by layer with q in regs*/

//padding for bank conflicts
#if p_Nq==16
#define p_pad 1
#else
#define p_pad 0
#endif


@kernel void bp2AxAffineHex3D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  wJ,
                        @restrict const  dfloat *  I,
                        @restrict const  dfloat *  MM,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){


  for(dlong eo=0; eo<Nelements; eo+=p_NelementsPerBlk; @outer(0)){

    @shared dfloat s_MM[p_Nq][p_Nq+p_pad];
    @shared dfloat s_q[p_Nfields][p_NelementsPerBlk][p_Nq][p_Nq+p_pad];

    @exclusive dlong element;

    // register array to hold q(i,j,0:N) private to thread
    @exclusive dfloat r_q[p_Nfields][p_Nq];
    // array for results Mq(i,j,0:N)
    @exclusive dfloat r_Mq[p_Nfields][p_Nq];

    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          if(es==0) s_MM[j][i] = MM[i+p_Nq*j];

          const dlong e = eo + es;

          if(e<Nelements) {
            element = elementList[e];
            const dfloat J = wJ[element];

            // load pencil of u into register
            const dlong base = i + j*p_Nq + element*p_Np*p_Nfields;

            // #pragma unroll p_Nq
            for(int f=0;f<p_Nfields;++f) {
              for(int k=0;k<p_Nq;++k) {
                const dlong id = GlobalToLocal[base + k*p_Nq*p_Nq + f*p_Np];
                r_q[f][k] = (id!=-1) ? J*q[id] : 0.0;
              }
            }
          } else {
            element = -1;
          }

          for (int k=0;k<p_Nq;k++) {
            for(int f=0;f<p_Nfields;++f) {
              r_Mq[f][k] = 0.0;
            }
          }
        }
      }
    }

    // Layer by layer
    for(int k=0; k<p_Nq; k++){

      for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){
            for(int f=0;f<p_Nfields;++f) {
              // load a layer of q into shmem
              s_q[f][es][j][i] = r_q[f][k];
            }
          }
        }
      }

      @exclusive dfloat Mq[p_Nfields];

      // multiply by M in 'r'
      for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){

            for(int f=0;f<p_Nfields;++f) {
              Mq[f] = 0;
            }

            for (int m=0;m<p_Nq;m++) {
              const dfloat Mi = s_MM[m][i];
              for(int f=0;f<p_Nfields;++f) {
                Mq[f] += Mi*s_q[f][es][j][m];
              }
            }
          }
        }
      }

      for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){
            for(int f=0;f<p_Nfields;++f) {
              s_q[f][es][j][i] = Mq[f];
            }
          }
        }
      }

      // multiply by M in 's'
      for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){

            for(int f=0;f<p_Nfields;++f) {
              Mq[f] = 0;
            }

            for (int m=0;m<p_Nq;m++) {
              const dfloat Mj = s_MM[m][j];
              for(int f=0;f<p_Nfields;++f) {
                Mq[f] += Mj*s_q[f][es][m][i];
              }
            }

            for (int m=0;m<p_Nq;m++) {
              const dfloat Mk = s_MM[m][k];
              for(int f=0;f<p_Nfields;++f) {
                r_Mq[f][m] += Mk*Mq[f];
              }
            }
          }
        }
      }
    }

    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          if (element>-1) {
            const dlong base = i + j*p_Nq + element*p_Np*p_Nfields;

            for(int f=0;f<p_Nfields;++f) {
              for(int k=0;k<p_Nq;++k){
                Aq[base+k*p_Nq*p_Nq+f*p_Np] = r_Mq[f][k];
              }
            }
          }
        }
      }
    }
  }
}
#endif

#if KERNEL_NUMBER==2
/*MFMA 4x4, layer by layer with q in regs*/
#define p_pad 1

@kernel void bp2AxAffineHex3D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  wJ,
                        @restrict const  dfloat *  I,
                        @restrict const  dfloat *  MM,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){


  for(dlong e=0; e<Nelements; e++; @outer(0)){

    @shared dfloat s_MM[16][16+p_pad];
    @shared dfloat s_q[p_Nfields][16][16+p_pad];

    @exclusive dlong element;

    // register array to hold q(i,j,0:N) private to thread
    @exclusive dfloat r_q[p_Nfields][p_Nq];
    // array for results Mq(i,j,0:N)
    @exclusive dfloat r_Mq[p_Nfields][p_Nq];

    for(int j=0;j<16;++j;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){

        s_MM[j][i] = (i<p_Nq && j<p_Nq) ? MM[i+p_Nq*j] : 0.0;

        element = elementList[e];
        const dfloat J = wJ[element];

        // load pencil of q into register
        const dlong base = i + j*p_Nq + element*p_Np*p_Nfields;

        // #pragma unroll p_Nq
        for(int k=0;k<p_Nq;++k) {
          for(int f=0;f<p_Nfields;++f) {
            const dlong id = (i<p_Nq && j<p_Nq) ? GlobalToLocal[base + k*p_Nq*p_Nq + f*p_Np] : -1;
            r_q[f][k] = (id!=-1) ? J*q[id] : 0.0;
          }
        }

        for (int k=0;k<p_Nq;k++) {
          for(int f=0;f<p_Nfields;++f) {
            r_Mq[f][k] = 0.0;
          }
        }
      }
    }

    // Layer by layer
    for(int k=0; k<p_Nq; k++){

      for(int j=0;j<16;++j;@inner(1)){
        for(int i=0;i<16;++i;@inner(0)){
          for(int f=0;f<p_Nfields;++f) {
            // load a layer of q into shmem
            s_q[f][j][i] = r_q[f][k];
          }
        }
      }

      @exclusive dfloat Mq[p_Nfields];

      // multiply by M in 'r'
      for(int j=0;j<16;++j;@inner(1)){
        for(int i=0;i<16;++i;@inner(0)){

          for(int f=0;f<p_Nfields;++f) {
            Mq[f] = 0;
          }

          for (int m=0;m<p_Nq;m+=4) {
            const dfloat r_M = s_MM[i][m+(j%4)]; //replicated 16 columns and 4 rows of M in each wave

            for(int f=0;f<p_Nfields;++f) {
              const dfloat r_q = s_q[f][(i%4)+4*(j/4)][m+(j%4)]; //replicated 4x4 matrix of dofs
              Mq[f] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_q, r_M, Mq[f], 0, 0, 0);
            }
          }
        }
      }

      for(int j=0;j<16;++j;@inner(1)){
        for(int i=0;i<16;++i;@inner(0)){
          for(int f=0;f<p_Nfields;++f) {
            s_q[f][j][i] = Mq[f];
          }
        }
      }

      // multiply by M in 's'
      for(int j=0;j<16;++j;@inner(1)){
        for(int i=0;i<16;++i;@inner(0)){

          for(int f=0;f<p_Nfields;++f) {
            Mq[f] = 0;
          }

          for (int m=0;m<p_Nq;m+=4) {
            const dfloat r_M = s_MM[i%4+4*(j/4)][m+j%4];//replicated 4x4 submatrix of M

            for(int f=0;f<p_Nfields;++f) {
              const dfloat r_q = s_q[f][m+j%4][i]; //replicated 16 x-slices and 4 y-slices of q in each wave
              Mq[f] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_M, r_q, Mq[f], 0, 0, 0);
            }
          }

          for (int m=0;m<p_Nq;m++) {
            const dfloat Mk = s_MM[m][k];
            for(int f=0;f<p_Nfields;++f) {
              r_Mq[f][m] += Mk*Mq[f];
            }
          }
        }
      }
    }

    for(int j=0;j<16;++j;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){
        if(i<p_Nq && j<p_Nq){
          const dlong base = i + j*p_Nq + element*p_Np*p_Nfields;

          for(int f=0;f<p_Nfields;++f) {
            for(int k=0;k<p_Nq;++k){
              Aq[base+k*p_Nq*p_Nq+f*p_Nfields] = r_Mq[f][k];
            }
          }
        }
      }
    }
  }
}
#endif
