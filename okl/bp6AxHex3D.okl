/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/



#if KERNEL_NUMBER==0
//This kernel processes 2D slices of the element in shmem and uses register arrays
// to store the element itself. May be slower for low order but allows us to run
// high degree efficiently

//padding for bank conflicts
#if p_Nq==16
#define p_pad 1
#else
#define p_pad 0
#endif

@kernel void bp6AxHex3D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  wJ,
                        @restrict const  dfloat *  vgeo,
                        @restrict const  dfloat *  ggeo,
                        @restrict const  dfloat *  gllw,
                        @restrict const  dfloat *  D,
                        @restrict const  dfloat *  S,
                        @restrict const  dfloat *  MM,
                        const dfloat lambda,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){

  for(dlong e=0; e<Nelements; e++; @outer(0)){

    @shared dfloat s_D[p_Nq][p_Nq+p_pad];
    @shared dfloat s_q[p_Nfields][p_Nq][p_Nq+p_pad];
    @shared dfloat s_v[p_Nfields][p_Nq][p_Nq+p_pad];
    @shared dfloat s_w[p_Nfields][p_Nq][p_Nq+p_pad];

    @exclusive dfloat r_GDut[p_Nfields], r_Auk[p_Nfields];

    // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_u[p_Nq][p_Nfields];
    // array for results Au(i,j,0:N)
    @exclusive dfloat r_Au[p_Nq][p_Nfields];

    @exclusive dlong element;

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq*j+i];// D is column major

        element = elementList[e];

        const dlong base = i + j*p_Nq + element*p_Np*p_Nfields;

        // load pencil of u into register
        // #pragma unroll p_Nq
        for(int f=0;f<p_Nfields;++f) {
          for (int k=0;k<p_Nq;k++) {
            const dlong id = GlobalToLocal[base + f*p_Np + k*p_Nq*p_Nq];
            r_u[k][f] = (id!=-1) ? q[id] : 0.0;
          }
        }

        // #pragma unroll p_Nq
        for (int k=0;k<p_Nq;k++) {
          for(int f=0;f<p_Nfields;++f) {
            r_Au[k][f] = 0.0;
          }
        }
      }
    }

    // Layer by layer
#if OCCA_USE_CUDA==1
    // only force some type of unrolling in CUDA mode
    #pragma unroll p_Nq
#endif
    for(int k = 0;k < p_Nq; k++){

      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          // share u(:,:,k)
          for(int f=0;f<p_Nfields;++f) {
            s_q[f][j][i] = r_u[k][f];
          }
        }
      }

      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          // prefetch geometric factors
          const dlong gbase = element*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
          const dfloat r_GwJ = wJ[gbase];
          const dfloat r_G00 = ggeo[p_Nggeo*gbase+p_G00ID];
          const dfloat r_G01 = ggeo[p_Nggeo*gbase+p_G01ID];
          const dfloat r_G11 = ggeo[p_Nggeo*gbase+p_G11ID];
          const dfloat r_G12 = ggeo[p_Nggeo*gbase+p_G12ID];
          const dfloat r_G02 = ggeo[p_Nggeo*gbase+p_G02ID];
          const dfloat r_G22 = ggeo[p_Nggeo*gbase+p_G22ID];

          dfloat ur[p_Nfields] = {0.f};
          dfloat us[p_Nfields] = {0.f};
          dfloat ut[p_Nfields] = {0};

          // #pragma unroll p_Nq
          for (int m=0;m<p_Nq;m++) {
            for(int f=0;f<p_Nfields;++f) {
              ut[f] += s_D[k][m]*r_u[m][f];
            }
          }

          // #pragma unroll p_Nq
          for (int m=0;m<p_Nq;m++) {
            for(int f=0;f<p_Nfields;++f) {
              ur[f]   += s_D[i][m]*s_q[f][j][m];
            }
          }

          for (int m=0;m<p_Nq;m++) {
            for(int f=0;f<p_Nfields;++f) {
              us[f]   += s_D[j][m]*s_q[f][m][i];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            s_v[f][j][i] = (r_G00*ur[f] + r_G01*us[f] + r_G02*ut[f]);
            s_w[f][j][i] = (r_G01*ur[f] + r_G11*us[f] + r_G12*ut[f]);
            r_GDut[f]    = (r_G02*ur[f] + r_G12*us[f] + r_G22*ut[f]);

            r_Auk[f] = r_GwJ*lambda*r_u[k][f];
          }
        }
      }

      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          // #pragma unroll p_Nq
          for (int m=0;m<p_Nq;m++) {
            for(int f=0;f<p_Nfields;++f) {
              r_Au[m][f] += s_D[k][m]*r_GDut[f];
            }
          }

          for (int m=0;m<p_Nq;m++) {
            for(int f=0;f<p_Nfields;++f) {
              r_Auk[f] += s_D[m][i]*s_v[f][j][m];
            }
          }

          // #pragma unroll p_Nq
          for (int m=0;m<p_Nq;m++) {
            for(int f=0;f<p_Nfields;++f) {
              r_Auk[f] += s_D[m][j]*s_w[f][m][i];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            r_Au[k][f] += r_Auk[f];
          }
        }
      }
    } //end Layer by layer

    // write out
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong id = element*p_Np*p_Nfields + j*p_Nq + i;

        // #pragma unroll p_Nq
        for(int f=0;f<p_Nfields;++f) {
          for (int k=0;k<p_Nq;k++) {
            Aq[id+f*p_Nq+k*p_Nq*p_Nq] = r_Au[k][f];
          }
        }
      }
    }
  }
}
#endif

#if KERNEL_NUMBER==1

/* Blocked version */

//padding for bank conflicts
#if p_Nq==12 || p_Nq==14 || p_Nq==16
#define p_pad 1
#else
#define p_pad 0
#endif

@kernel void bp6AxHex3D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  wJ,
                        @restrict const  dfloat *  vgeo,
                        @restrict const  dfloat *  ggeo,
                        @restrict const  dfloat *  gllw,
                        @restrict const  dfloat *  D,
                        @restrict const  dfloat *  S,
                        @restrict const  dfloat *  MM,
                        const dfloat lambda,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){

  for(dlong eo=0; eo<Nelements; eo+=p_NelementsPerBlk; @outer(0)){

    @shared dfloat s_D[p_Nq][p_Nq+p_pad];
    @shared dfloat s_q[p_Nfields][p_NelementsPerBlk][p_Nq][p_Nq+p_pad];
    @shared dfloat s_v[p_Nfields][p_NelementsPerBlk][p_Nq][p_Nq+p_pad];
    @shared dfloat s_w[p_Nfields][p_NelementsPerBlk][p_Nq][p_Nq+p_pad];

    @exclusive dfloat r_GDut[p_Nfields], r_Auk[p_Nfields];

    // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_u[p_Nq][p_Nfields];
    // array for results Au(i,j,0:N)
    @exclusive dfloat r_Au[p_Nq][p_Nfields];

    @exclusive dlong element;

    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          //load D into local memory
          // s_D[i][j] = d \phi_i at node j
          if (es==0) {
            s_D[j][i] = D[p_Nq*j+i];// D is column major
          }

          const dlong e = es+eo;

          if(e<Nelements){
            element = elementList[e];

            const dlong base = i + j*p_Nq + element*p_Np*p_Nfields;

            // load pencil of u into register
            // #pragma unroll p_Nq
            for(int f=0;f<p_Nfields;++f) {
              for (int k=0;k<p_Nq;k++) {
                const dlong id = GlobalToLocal[base + f*p_Np + k*p_Nq*p_Nq];
                r_u[k][f] = (id!=-1) ? q[id] : 0.0;
              }
            }
          } else {
            element = -1;
          }

          // #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            for(int f=0;f<p_Nfields;++f) {
              r_Au[k][f] = 0.0;
            }
          }
        }
      }
    }

    // Layer by layer
#if OCCA_USE_CUDA==1
    // only force some type of unrolling in CUDA mode
    #pragma unroll p_Nq
#endif
    for(int k = 0;k < p_Nq; k++){

      for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){
            // share u(:,:,k)
            for(int f=0;f<p_Nfields;++f) {
              s_q[f][es][j][i] = r_u[k][f];
            }
          }
        }
      }

      for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){

            dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;

            if(element>-1){
              // prefetch geometric factors
              const dlong gbase = element*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

              r_GwJ = wJ[gbase];
              r_G00 = ggeo[p_Nggeo*gbase+p_G00ID];
              r_G01 = ggeo[p_Nggeo*gbase+p_G01ID];
              r_G11 = ggeo[p_Nggeo*gbase+p_G11ID];
              r_G12 = ggeo[p_Nggeo*gbase+p_G12ID];
              r_G02 = ggeo[p_Nggeo*gbase+p_G02ID];
              r_G22 = ggeo[p_Nggeo*gbase+p_G22ID];
            }

            dfloat ur[p_Nfields] = {0.f};
            dfloat us[p_Nfields] = {0.f};
            dfloat ut[p_Nfields] = {0};

            // #pragma unroll p_Nq
            for (int m=0;m<p_Nq;m++) {
              for(int f=0;f<p_Nfields;++f) {
                ut[f] += s_D[k][m]*r_u[m][f];
              }
            }

            // #pragma unroll p_Nq
            for (int m=0;m<p_Nq;m++) {
              for(int f=0;f<p_Nfields;++f) {
                ur[f]   += s_D[i][m]*s_q[f][es][j][m];
              }
            }

            for (int m=0;m<p_Nq;m++) {
              for(int f=0;f<p_Nfields;++f) {
                us[f]   += s_D[j][m]*s_q[f][es][m][i];
              }
            }

            for(int f=0;f<p_Nfields;++f) {
              s_v[f][es][j][i] = (r_G00*ur[f] + r_G01*us[f] + r_G02*ut[f]);
              s_w[f][es][j][i] = (r_G01*ur[f] + r_G11*us[f] + r_G12*ut[f]);
              r_GDut[f]        = (r_G02*ur[f] + r_G12*us[f] + r_G22*ut[f]);

              r_Auk[f] = r_GwJ*lambda*r_u[k][f];
            }
          }
        }
      }

      for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){

            // #pragma unroll p_Nq
            for (int m=0;m<p_Nq;m++) {
              for(int f=0;f<p_Nfields;++f) {
                r_Au[m][f] += s_D[k][m]*r_GDut[f];
              }
            }

            for (int m=0;m<p_Nq;m++) {
              for(int f=0;f<p_Nfields;++f) {
                r_Auk[f]   += s_D[m][i]*s_v[f][es][j][m];
              }
            }

            // #pragma unroll p_Nq
            for (int m=0;m<p_Nq;m++) {
              for(int f=0;f<p_Nfields;++f) {
                r_Auk[f]   += s_D[m][j]*s_w[f][es][m][i];
              }
            }

            for(int f=0;f<p_Nfields;++f) {
              r_Au[k][f] += r_Auk[f];
            }
          }
        }
      }
    } //end Layer by layer

    // write out
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          if(element>-1){
            const dlong id = element*p_Np*p_Nfields + j*p_Nq + i;

            // #pragma unroll p_Nq
            for(int f=0;f<p_Nfields;++f) {
              for (int k=0;k<p_Nq;k++) {
                Aq[id+f*p_Np+k*p_Nq*p_Nq] = r_Au[k][f];
              }
            }
          }
        }
      }
    }
  }
}
#endif

#if KERNEL_NUMBER==2
//This kernel stores the entire hex element in shmem.
// Good for low orders, but will exceed 1024 threads per block after N=9

@kernel void bp6AxHex3D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  wJ,
                        @restrict const  dfloat *  vgeo,
                        @restrict const  dfloat *  ggeo,
                        @restrict const  dfloat *  gllw,
                        @restrict const  dfloat *  D,
                        @restrict const  dfloat *  S,
                        @restrict const  dfloat *  MM,
                        const dfloat lambda,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){

//padding for bank conflicts
#if p_Nq==12 || p_Nq==14 || p_Nq==16
#define p_pad 1
#else
#define p_pad 0
#endif

  for(int eo=0;eo<Nelements;eo+=p_NelementsPerBlk;@outer(0)){

    @shared dfloat s_D [p_Nq][p_Nq+p_pad];

    @shared dfloat   s_q[p_Nfields][p_NelementsPerBlk][p_Nq][p_Nq][p_Nq+p_pad];
    @shared dfloat s_Gqr[p_Nfields][p_NelementsPerBlk][p_Nq][p_Nq][p_Nq+p_pad];
    @shared dfloat s_Gqs[p_Nfields][p_NelementsPerBlk][p_Nq][p_Nq][p_Nq+p_pad];
    @shared dfloat s_Gqt[p_Nfields][p_NelementsPerBlk][p_Nq][p_Nq][p_Nq+p_pad];

    @exclusive dlong element;
    @exclusive dfloat r_wJ;

    @exclusive int k, es;

    for(int ke=0;ke<p_Nq*p_NelementsPerBlk;++ke;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          //load operators
          if(ke==0){
            s_D[j][i] = D[j*p_Nq+i];
          }

          k  = ke%p_Nq;
          es = ke/p_Nq;

          const dlong e = es+eo;

          if(e<Nelements){
            element = elementList[e];
            for(int f=0;f<p_Nfields;++f) {
              const dlong id = GlobalToLocal[i + j*p_Nq + k*p_Nq*p_Nq + f*p_Np + element*p_Np*p_Nfields];
              s_q[f][es][k][j][i] = (id!=-1) ? q[id] : 0.;
            }
          } else {
            element = -1;
          }
        }
      }
    }

    for(int ke=0;ke<p_Nq*p_NelementsPerBlk;++ke;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22;

          if(element>-1){
            // prefetch geometric factors
            const dlong gbase = element*p_Np + i + j*p_Nq + k*p_Nq*p_Nq;
            r_wJ  = wJ[gbase];
            r_G00 = ggeo[p_Nggeo*gbase+p_G00ID];
            r_G01 = ggeo[p_Nggeo*gbase+p_G01ID];
            r_G02 = ggeo[p_Nggeo*gbase+p_G02ID];
            r_G11 = ggeo[p_Nggeo*gbase+p_G11ID];
            r_G12 = ggeo[p_Nggeo*gbase+p_G12ID];
            r_G22 = ggeo[p_Nggeo*gbase+p_G22ID];
          }

          // 'r' terms
          dfloat qr[p_Nfields] = {0};
          // #pragma unroll p_Unr
          for(int m = 0; m < p_Nq; ++m) {
            for(int f=0;f<p_Nfields;++f) {
              qr[f] += s_D[i][m]*s_q[f][es][k][j][m];
            }
          }
          // 's' terms
          dfloat qs[p_Nfields] = {0};
          // #pragma unroll p_Unr
          for(int m = 0; m < p_Nq; ++m) {
            for(int f=0;f<p_Nfields;++f) {
              qs[f] += s_D[j][m]*s_q[f][es][k][m][i];
            }
          }
          // 't' terms
          dfloat qt[p_Nfields]={0.0};
          // #pragma unroll p_Unr
          for(int m = 0; m < p_Nq; ++m) {
            for(int f=0;f<p_Nfields;++f) {
              qt[f] += s_D[k][m]*s_q[f][es][m][j][i];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            s_Gqr[f][es][k][j][i] = r_G00*qr[f] + r_G01*qs[f] + r_G02*qt[f];
            s_Gqs[f][es][k][j][i] = r_G01*qr[f] + r_G11*qs[f] + r_G12*qt[f];
            s_Gqt[f][es][k][j][i] = r_G02*qr[f] + r_G12*qs[f] + r_G22*qt[f];
          }
        }
      }
    }

    for(int ke=0;ke<p_Nq*p_NelementsPerBlk;++ke;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          dfloat tmpAp[p_Nfields] = {0.};

          for(int f=0;f<p_Nfields;++f) {
            tmpAp[f] = s_q[f][es][k][j][i]*lambda*r_wJ;
          }

          // use same matrix for both slices
          // #pragma unroll p_Unr
          for(int m=0;m<p_Nq;++m){
            for(int f=0;f<p_Nfields;++f) {
              tmpAp[f] += s_D[m][i]*s_Gqr[f][es][k][j][m];
            }
          }

          for(int m=0;m<p_Nq;++m){
            for(int f=0;f<p_Nfields;++f) {
              tmpAp[f] += s_D[m][j]*s_Gqs[f][es][k][m][i];
            }
          }

          // #pragma unroll p_Unr
          for(int m=0;m<p_Nq;++m){
            for(int f=0;f<p_Nfields;++f) {
              tmpAp[f] += s_D[m][k]*s_Gqt[f][es][m][j][i];
            }
          }

          if(element>-1){
            const dlong base = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np*p_Nfields;
            for(int f=0;f<p_Nfields;++f) {
              Aq[base+f*p_Np] = tmpAp[f];
            }
          }
        }
      }
    }
  }
}
#endif

#if KERNEL_NUMBER==3
// MFMA kernel for high order

//padding for bank conflicts
#define p_pad 1

@kernel void bp6AxHex3D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  wJ,
                        @restrict const  dfloat *  vgeo,
                        @restrict const  dfloat *  ggeo,
                        @restrict const  dfloat *  gllw,
                        @restrict const  dfloat *  D,
                        @restrict const  dfloat *  S,
                        @restrict const  dfloat *  MM,
                        const dfloat lambda,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){

  for(dlong e=0; e<Nelements; e++; @outer(0)){

    @shared dfloat s_D[16][16+p_pad];
    @shared dfloat s_q[p_Nfields][16][16+p_pad];
    @shared dfloat s_v[p_Nfields][16][16+p_pad];
    @shared dfloat s_w[p_Nfields][16][16+p_pad];

    @exclusive dfloat r_GDut[p_Nfields], r_Auk[p_Nfields];

    // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_u[p_Nq][p_Nfields];
    // array for results Au(i,j,0:N)
    @exclusive dfloat r_Au[p_Nq][p_Nfields];

    @exclusive dlong element;

    for(int j=0;j<16;++j;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = (i<p_Nq && j<p_Nq) ? D[p_Nq*j+i] : 0.0;

        element = elementList[e];

        const dlong base = i + j*p_Nq + element*p_Np*p_Nfields;

        // load pencil of u into register
        for(int f=0;f<p_Nfields;++f) {
          for (int k=0;k<p_Nq;k++) {
            const dlong id = (i<p_Nq && j<p_Nq) ? GlobalToLocal[base + f*p_Np + k*p_Nq*p_Nq] : -1;
            r_u[k][f] = (id!=-1) ? q[id] : 0.0;
          }
        }

        for (int k=0;k<p_Nq;k++) {
          for(int f=0;f<p_Nfields;++f) {
            r_Au[k][f] = 0.0;
          }
        }
      }
    }

    // Layer by layer
    for(int k=0; k<p_Nq; k++){

      for(int j=0;j<16;++j;@inner(1)){
        for(int i=0;i<16;++i;@inner(0)){
          if (i<p_Nq && j < p_Nq) {
            // share u(:,:,k)
            for(int f=0;f<p_Nfields;++f) {
              s_q[f][j][i] = r_u[k][f];
            }
          }
        }
      }

      for(int j=0;j<16;++j;@inner(1)){
        for(int i=0;i<16;++i;@inner(0)){

          dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;

          if(i<p_Nq && j<p_Nq){
            // prefetch geometric factors
            const dlong gbase = element*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

            r_GwJ = wJ[gbase];
            r_G00 = ggeo[p_Nggeo*gbase+p_G00ID];
            r_G01 = ggeo[p_Nggeo*gbase+p_G01ID];
            r_G11 = ggeo[p_Nggeo*gbase+p_G11ID];
            r_G12 = ggeo[p_Nggeo*gbase+p_G12ID];
            r_G02 = ggeo[p_Nggeo*gbase+p_G02ID];
            r_G22 = ggeo[p_Nggeo*gbase+p_G22ID];
          }

          dfloat ur[p_Nfields] = {0.};
          dfloat us[p_Nfields] = {0.};
          dfloat ut[p_Nfields] = {0.};

          for (int m=0;m<p_Nq;m++) {
            for(int f=0;f<p_Nfields;++f) {
              ut[f] += s_D[k][m]*r_u[m][f];
            }
          }

          for (int m=0;m<p_Nq;m+=4) {
            const dfloat r_D = s_D[i][m+(j%4)];
            for(int f=0;f<p_Nfields;++f) {
              const dfloat r_q = s_q[f][(i%4)+4*(j/4)][m+(j%4)];

              ur[f] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_q, r_D, ur[f], 0, 0, 0); // x-deriv
            }
          }

          for (int m=0;m<p_Nq;m+=4) {
            const dfloat r_D = s_D[i%4+4*(j/4)][m+j%4];
            for(int f=0;f<p_Nfields;++f) {
              const dfloat r_q = s_q[f][m+j%4][i];

              // Ordering of the result is the same as the B matrix
              us[f] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_D, r_q, us[f], 0, 0, 0); // y-deriv
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            s_v[f][j][i] = (r_G00*ur[f] + r_G01*us[f] + r_G02*ut[f]);
            s_w[f][j][i] = (r_G01*ur[f] + r_G11*us[f] + r_G12*ut[f]);
            r_GDut[f]    = (r_G02*ur[f] + r_G12*us[f] + r_G22*ut[f]);

            r_Auk[f] = r_GwJ*lambda*r_u[k][f];
          }
        }
      }

      for(int j=0;j<16;++j;@inner(1)){
        for(int i=0;i<16;++i;@inner(0)){

          for (int m=0;m<p_Nq;m++) {
            for(int f=0;f<p_Nfields;++f) {
              r_Au[m][f] += s_D[k][m]*r_GDut[f];
            }
          }

          for (int m=0;m<p_Nq;m+=4) {
            const dfloat r_D = s_D[m+j%4][i];
            for(int f=0;f<p_Nfields;++f) {
              const dfloat r_q = s_v[f][i%4+4*(j/4)][m+j%4];

              r_Auk[f] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_q, r_D, r_Auk[f], 0, 0, 0); // x-deriv
            }
          }

          for (int m=0;m<p_Nq;m+=4) {
            const dfloat r_D = s_D[m+j%4][i%4+4*(j/4)];
            for(int f=0;f<p_Nfields;++f) {
              const dfloat r_q = s_w[f][m+j%4][i];

              // Ordering of the result is the same as the B matrix
              r_Auk[f] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_D, r_q, r_Auk[f], 0, 0, 0); // y-deriv
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            r_Au[k][f] += r_Auk[f];
          }
        }
      }
    } //end Layer by layer

    // write out
    for(int j=0;j<16;++j;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){
        if(i<p_Nq && j<p_Nq){
          const dlong id = element*p_Np*p_Nfields + j*p_Nq + i;

          for(int f=0;f<p_Nfields;++f) {
            for (int k=0;k<p_Nq;k++) {
              Aq[id+f*p_Np+k*p_Nq*p_Nq] = r_Au[k][f];
            }
          }
        }
      }
    }
  }
}
#endif
