/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

#if KERNEL_NUMBER==0

/*Unblocked 2D threadblock kernel*/
@kernel void bp4AxAffineHex3D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  wJ,
                        @restrict const  dfloat *  ggeo,
                        @restrict const  dfloat *  D,
                        @restrict const  dfloat *  I,
                        @restrict const  dfloat *  invV,
                        @restrict const  dfloat *  S,
                        @restrict const  dfloat *  MM,
                        const dfloat lambda,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){

  for(int e=0;e<Nelements;e++;@outer(0)){

//padding for bank conflicts
#if p_Nq==16
#define p_pad 1
#else
#define p_pad 0
#endif

    @shared dfloat s_invV[p_Nq][p_Nq+p_pad];
    @shared dfloat s_D[p_Nq][p_Nq+p_pad];

    @shared dfloat s_q[p_Nq][p_Nfields][p_Nq][p_Nq+p_pad];
    @shared dfloat s_qr[p_Nfields][p_Nq][p_Nq+p_pad];
    @shared dfloat s_qs[p_Nfields][p_Nq][p_Nq+p_pad];

    @exclusive dfloat r_q[p_Nq][p_Nfields];
    @exclusive dfloat r_qt[p_Nfields];

    @exclusive dlong element;

    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

        s_invV[b][a] = invV[a+p_Nq*b];
        s_D[b][a] = D[b*p_Nq+a];

        element = elementList[e];

        // load q
        const dlong base = a + b*p_Nq + element*p_Np*p_Nfields;

        //#pragma unroll p_Nq
        for(int f=0;f<p_Nfields;++f) {
          for(int c=0;c<p_Nq;++c) {
            const dlong id = GlobalToLocal[base + f*p_Np + c*p_Nq*p_Nq];
            s_q[c][f][b][a] = (id!=-1) ? q[id] : 0.0;
          }
        }
      }
    }


    //============== interpolate in 3 dir ========================
    // b --> a --> c
    for(int c=0;c<p_Nq;++c;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

        // #pragma unroll p_Nq
        for(int b=0;b<p_Nq;++b) {
          for(int f=0;f<p_Nfields;++f) {
            r_q[b][f] = s_q[c][f][b][a];
          }
        }

        // #pragma unroll p_Nq
        for(int j=0;j<p_Nq;++j){

          dfloat tmp[p_Nfields] = {0.};

          // #pragma unroll p_Nq
          for(int b=0;b<p_Nq;++b){
            const dfloat sVjb= s_invV[j][b];
            for(int f=0;f<p_Nfields;++f) {
              tmp[f]  += sVjb*r_q[b][f];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            s_q[c][f][j][a] = tmp[f];
          }
        }
      }
    }

    //transform in a
    for(int c=0;c<p_Nq;++c;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){

        // #pragma unroll p_Nq
        for(int a=0;a<p_Nq;++a) {
          for(int f=0;f<p_Nfields;++f) {
            r_q[a][f] = s_q[c][f][j][a];
          }
        }

        // #pragma unroll p_Nq
        for(int i=0;i<p_Nq;++i){

          dfloat tmp[p_Nfields] = {0.};

          //#pragma unroll p_Nq
          for(int a=0;a<p_Nq;++a){
            const dfloat sVia = s_invV[i][a];
            for(int f=0;f<p_Nfields;++f) {
              tmp[f]  += sVia*r_q[a][f];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            s_q[c][f][j][i] = tmp[f];
          }
        }
      }
    }

    // transform in c
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

        // #pragma unroll p_Nq
        for(int c=0;c<p_Nq;++c) {
          for(int f=0;f<p_Nfields;++f) {
            r_q[c][f] = s_q[c][f][j][i];
          }
        }

        // #pragma unroll p_Nq
        for(int k=0;k<p_Nq;++k){

          dfloat tmp[p_Nfields] = {0.};

          //#pragma unroll p_Nq
          for(int c=0;c<p_Nq;++c){
            const dfloat sVkc = s_invV[k][c];
            for(int f=0;f<p_Nfields;++f) {
              tmp[f]  += sVkc*r_q[c][f];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            s_q[k][f][j][i] = tmp[f]; // ok since only this thread
          }
        }

        // #pragma unroll p_Nq
        for(int k=0; k<p_Nq; ++k) {
          for(int f=0;f<p_Nfields;++f) {
            r_q[k][f]=0.0f;
          }
        }
      }
    }

    //===============now differentiate once interpolated
#if OCCA_USE_CUDA==1
    #pragma unroll p_Nq
#endif
    for(int k=0; k<p_Nq; ++k) {

      for(int j=0; j<p_Nq; ++j; @inner(1)) {
        for(int i=0; i<p_Nq; ++i; @inner(0)) {
          //geofactors for k j i thread
          const dfloat r_GwJ = wJ[element];

          const dfloat r_G00 = ggeo[p_Nggeo*element+p_G00ID];
          const dfloat r_G01 = ggeo[p_Nggeo*element+p_G01ID];
          const dfloat r_G02 = ggeo[p_Nggeo*element+p_G02ID];

          const dfloat r_G11 = ggeo[p_Nggeo*element+p_G11ID];
          const dfloat r_G12 = ggeo[p_Nggeo*element+p_G12ID];
          const dfloat r_G22 = ggeo[p_Nggeo*element+p_G22ID];

          // now, put together dq/dr, qq/ds, dq/dt and dq/dI
          dfloat dr[p_Nfields] = {0.0f};
          dfloat ds[p_Nfields] = {0.0f};
          dfloat dt[p_Nfields] = {0.0f};

          //#pragma unroll p_Nq
          for (int n = 0; n<p_Nq; ++n) {
            for(int f=0;f<p_Nfields;++f) {
              dr[f] += s_D[i][n]*s_q[k][f][j][n];
            }
          }
          for (int n = 0; n<p_Nq; ++n) {
            for(int f=0;f<p_Nfields;++f) {
              ds[f] += s_D[j][n]*s_q[k][f][n][i];
            }
          }
          for (int n = 0; n<p_Nq; ++n) {
            for(int f=0;f<p_Nfields;++f) {
              dt[f] += s_D[k][n]*s_q[n][f][j][i];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            s_qr[f][j][i] = r_G00*dr[f] + r_G01*ds[f] + r_G02*dt[f];
            s_qs[f][j][i] = r_G01*dr[f] + r_G11*ds[f] + r_G12*dt[f];
            r_qt[f] = r_G02*dr[f] + r_G12*ds[f] + r_G22*dt[f];

            r_q[k][f] += lambda*r_GwJ*s_q[k][f][j][i];
          }
        }
      }

      // weak diff
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          dfloat r_qk[p_Nfields]={0.0};
          //#pragma unroll p_Nq
          for(int n=0;n<p_Nq;++n){
            for(int f=0;f<p_Nfields;++f) {
              r_qk[f] += s_D[n][i]*s_qr[f][j][n];
            }
          }
          for(int n=0;n<p_Nq;++n){
            for(int f=0;f<p_Nfields;++f) {
              r_qk[f] += s_D[n][j]*s_qs[f][n][i];
            }
          }
          for(int n=0;n<p_Nq;++n){
            for(int f=0;f<p_Nfields;++f) {
              r_q[n][f] += s_D[k][n]*r_qt[f];
            }
          }
          for(int f=0;f<p_Nfields;++f) {
            r_q[k][f] += r_qk[f];
          }
        }
      }
    }//k

    //Loop 7
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

        // #pragma unroll p_Nq
        for(int k=0; k<p_Nq; ++k) {
          for(int f=0;f<p_Nfields;++f) {
            s_q[k][f][j][i] = r_q[k][f];
          }
        }
      }
    }

    //=========== now project =================================================
    // b -> c -> a

    // transform back in b
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

        // #pragma unroll p_Nq
        for(int j=0;j<p_Nq;++j){
          for(int f=0;f<p_Nfields;++f) {
            r_q[j][f] = s_q[k][f][j][i];
          }
        }

        // #pragma unroll p_Nq
        for(int b=0;b<p_Nq;++b){

          dfloat tmp[p_Nfields] = {0.0f};

          //#pragma unroll p_Nq
          for(int j=0;j<p_Nq;++j){
            const dfloat sVjb = s_invV[j][b];
            for(int f=0;f<p_Nfields;++f) {
              tmp[f]  += sVjb*r_q[j][f];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            s_q[k][f][b][i] = tmp[f];
          }
        }
      }
    }

    // transform back in a
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int b=0;b<p_Nq;++b;@inner(0)){
        // #pragma unroll p_Nq
        for(int i=0;i<p_Nq;++i) {
          for(int f=0;f<p_Nfields;++f) {
            r_q[i][f] = s_q[k][f][b][i];
          }
        }

        // #pragma unroll p_Nq
        for(int a=0;a<p_Nq;++a){

          dfloat tmp[p_Nfields]  = {0.0f};

          //#pragma unroll p_Nq
          for(int i=0;i<p_Nq;++i){
            const dfloat sVia = s_invV[i][a];
            for(int f=0;f<p_Nfields;++f) {
              tmp[f]  += sVia*r_q[i][f];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            s_q[k][f][b][a] = tmp[f];
          }
        }
      }
    }

    // transform back in c
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

        // #pragma unroll p_Nq
        for(int k=0;k<p_Nq;++k){
          for(int f=0;f<p_Nfields;++f) {
            r_q[k][f] = s_q[k][f][b][a];
          }
        }

        // #pragma unroll p_Nq
        for(int c=0;c<p_Nq;++c){

          dfloat tmp[p_Nfields]  = {0.0f};

          //#pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){
            const dfloat sVkc = s_invV[k][c];
            for(int f=0;f<p_Nfields;++f) {
              tmp[f]  += sVkc*r_q[k][f];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            Aq[element*p_Np*p_Nfields + f*p_Np + c*p_Nq*p_Nq + b*p_Nq + a] = tmp[f];
          }
        }//c
      }//a
    }//b
  }//e
}//kernel
#endif


#if KERNEL_NUMBER==1
/*blocked 2D threadblock kernel*/
@kernel void bp4AxAffineHex3D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  wJ,
                        @restrict const  dfloat *  ggeo,
                        @restrict const  dfloat *  D,
                        @restrict const  dfloat *  I,
                        @restrict const  dfloat *  invV,
                        @restrict const  dfloat *  S,
                        @restrict const  dfloat *  MM,
                        const dfloat lambda,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){

  for(int eo=0;eo<Nelements;eo+=p_NelementsPerBlk;@outer(0)){

//padding for bank conflicts
#if p_Nq==16
#define p_pad 1
#else
#define p_pad 0
#endif

    @shared dfloat s_invV[p_Nq][p_Nq+p_pad];
    @shared dfloat s_D[p_Nq][p_Nq+p_pad];

    @shared dfloat s_q[p_Nq][p_Nfields][p_NelementsPerBlk][p_Nq][p_Nq+p_pad];
    @shared dfloat s_qr[p_Nfields][p_NelementsPerBlk][p_Nq][p_Nq+p_pad];
    @shared dfloat s_qs[p_Nfields][p_NelementsPerBlk][p_Nq][p_Nq+p_pad];

    @exclusive dfloat r_q[p_Nq][p_Nfields];
    @exclusive dfloat r_qt[p_Nfields];

    @exclusive dlong r_e, element;

    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int b=0;b<p_Nq;++b;@inner(1)){
        for(int a=0;a<p_Nq;++a;@inner(0)){

          if(es==0){
            s_invV[b][a] = invV[a+p_Nq*b];
          }

          if (es==0)
            s_D[b][a] = D[b*p_Nq+a];

          r_e = eo + es;

          if(r_e<Nelements) {
            element = elementList[r_e];

            // load q
            const dlong base = a + b*p_Nq + element*p_Np*p_Nfields;

            //#pragma unroll p_Nq
            for(int f=0;f<p_Nfields;++f) {
              for(int c=0;c<p_Nq;++c) {
                const dlong id = GlobalToLocal[base + f*p_Np + c*p_Nq*p_Nq];
                s_q[c][f][es][b][a] = (id!=-1) ? q[id] : 0.0;
              }
            }
          }
        }
      }
    }


    //============== interpolate in 3 dir ========================
    // b --> a --> c
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int c=0;c<p_Nq;++c;@inner(1)){
        for(int a=0;a<p_Nq;++a;@inner(0)){

          // #pragma unroll p_Nq
          for(int b=0;b<p_Nq;++b) {
            for(int f=0;f<p_Nfields;++f) {
              r_q[b][f] = s_q[c][f][es][b][a];
            }
          }

          // #pragma unroll p_Nq
          for(int j=0;j<p_Nq;++j){

            dfloat tmp[p_Nfields] = {0};

            // #pragma unroll p_Nq
            for(int b=0;b<p_Nq;++b){
              const dfloat sVjb= s_invV[j][b];
              for(int f=0;f<p_Nfields;++f) {
                tmp[f]  += sVjb*r_q[b][f];
              }
            }

            for(int f=0;f<p_Nfields;++f) {
              s_q[c][f][es][j][a] = tmp[f];
            }
          }
        }
      }//for c
    }

    //transform in c
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int c=0;c<p_Nq;++c;@inner(1)){
        for(int j=0;j<p_Nq;++j;@inner(0)){

          // #pragma unroll p_Nq
          for(int a=0;a<p_Nq;++a) {
            for(int f=0;f<p_Nfields;++f) {
              r_q[a][f] = s_q[c][f][es][j][a];
            }
          }

          // #pragma unroll p_Nq
          for(int i=0;i<p_Nq;++i){

            dfloat tmp[p_Nfields] = {0};

            //#pragma unroll p_Nq
            for(int a=0;a<p_Nq;++a){
              const dfloat sVia = s_invV[i][a];
              for(int f=0;f<p_Nfields;++f) {
                tmp[f]  += sVia*r_q[a][f];
              }
            }

            for(int f=0;f<p_Nfields;++f) {
              s_q[c][f][es][j][i] = tmp[f];
            }
          }
        }
      }
    }

    // transform in c
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          // #pragma unroll p_Nq
          for(int c=0;c<p_Nq;++c) {
            for(int f=0;f<p_Nfields;++f) {
              r_q[c][f] = s_q[c][f][es][j][i];
            }
          }

          // #pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){

            dfloat tmp[p_Nfields] = {0};

            //#pragma unroll p_Nq
            for(int c=0;c<p_Nq;++c){
              const dfloat sVkc = s_invV[k][c];
              for(int f=0;f<p_Nfields;++f) {
                tmp[f]  += sVkc*r_q[c][f];
              }
            }

            for(int f=0;f<p_Nfields;++f) {
              s_q[k][f][es][j][i] = tmp[f]; // ok since only this thread
            }
          }

          // #pragma unroll p_Nq
          for(int k=0; k<p_Nq; ++k) {
            for(int f=0;f<p_Nfields;++f) {
              r_q[k][f]=0.0f;
            }
          }
        }
      }
    }

    //===============now differentiate once interpolated
#if OCCA_USE_CUDA==1
    #pragma unroll p_Nq
#endif
    for(int k=0; k<p_Nq; ++k) {

      for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
        for(int j=0; j<p_Nq; ++j; @inner(1)) {
          for(int i=0; i<p_Nq; ++i; @inner(0)) {

            dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;
            if (r_e<Nelements) {
              //geofactors for k j i thread
              r_GwJ = wJ[element];

              r_G00 = ggeo[p_Nggeo*element+p_G00ID];
              r_G01 = ggeo[p_Nggeo*element+p_G01ID];
              r_G02 = ggeo[p_Nggeo*element+p_G02ID];

              r_G11 = ggeo[p_Nggeo*element+p_G11ID];
              r_G12 = ggeo[p_Nggeo*element+p_G12ID];
              r_G22 = ggeo[p_Nggeo*element+p_G22ID];
            }

            // now, put together dq/dr, qq/ds, dq/dt and dq/dI
            dfloat dr[p_Nfields] = {0.0f};
            dfloat ds[p_Nfields] = {0.0f};
            dfloat dt[p_Nfields] = {0.0f};

            //#pragma unroll p_Nq
            for (int n = 0; n<p_Nq; ++n) {
              for(int f=0;f<p_Nfields;++f) {
                dr[f] += s_D[i][n]*s_q[k][f][es][j][n];
              }
            }
            for (int n = 0; n<p_Nq; ++n) {
              for(int f=0;f<p_Nfields;++f) {
                ds[f] += s_D[j][n]*s_q[k][f][es][n][i];
              }
            }
            for (int n = 0; n<p_Nq; ++n) {
              for(int f=0;f<p_Nfields;++f) {
                dt[f] += s_D[k][n]*s_q[n][f][es][j][i];
              }
            }

            for(int f=0;f<p_Nfields;++f) {
              s_qr[f][es][j][i] = r_G00*dr[f] + r_G01*ds[f] + r_G02*dt[f];
              s_qs[f][es][j][i] = r_G01*dr[f] + r_G11*ds[f] + r_G12*dt[f];
              r_qt[f] = r_G02*dr[f] + r_G12*ds[f] + r_G22*dt[f];

              r_q[k][f] += lambda*r_GwJ*s_q[k][f][es][j][i];
            }
          }
        }
      }

      // weak diff
      for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){
            dfloat r_qk[p_Nfields]={0.0};
            //#pragma unroll p_Nq
            for(int n=0;n<p_Nq;++n){
              for(int f=0;f<p_Nfields;++f) {
                r_qk[f] += s_D[n][i]*s_qr[f][es][j][n];
              }
            }
            for(int n=0;n<p_Nq;++n){
              for(int f=0;f<p_Nfields;++f) {
                r_qk[f] += s_D[n][j]*s_qs[f][es][n][i];
              }
            }
            for(int n=0;n<p_Nq;++n){
              for(int f=0;f<p_Nfields;++f) {
                r_q[n][f] += s_D[k][n]*r_qt[f];
              }
            }
            for(int f=0;f<p_Nfields;++f) {
              r_q[k][f] += r_qk[f];
            }
          }
        }
      }
    }//k

    //Loop 7
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          // #pragma unroll p_Nq
          for(int k=0; k<p_Nq; ++k) {
            for(int f=0;f<p_Nfields;++f) {
              s_q[k][f][es][j][i] = r_q[k][f];
            }
          }
        }
      }
    }

    //=========== now project =================================================
    // b -> c -> a

    // transform back in b
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int k=0;k<p_Nq;++k;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          // #pragma unroll p_Nq
          for(int j=0;j<p_Nq;++j){
            for(int f=0;f<p_Nfields;++f) {
              r_q[j][f] = s_q[k][f][es][j][i];
            }
          }

          // #pragma unroll p_Nq
          for(int b=0;b<p_Nq;++b){

            dfloat tmp[p_Nfields] = {0.0f};

            //#pragma unroll p_Nq
            for(int j=0;j<p_Nq;++j){
              const dfloat sVjb = s_invV[j][b];
              for(int f=0;f<p_Nfields;++f) {
                tmp[f]  += sVjb*r_q[j][f];
              }
            }

            for(int f=0;f<p_Nfields;++f) {
              s_q[k][f][es][b][i] = tmp[f];
            }
          }
        }
      }
    }

    // transform back in a
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int k=0;k<p_Nq;++k;@inner(1)){
        for(int b=0;b<p_Nq;++b;@inner(0)){
          // #pragma unroll p_Nq
          for(int i=0;i<p_Nq;++i){
            for(int f=0;f<p_Nfields;++f) {
              r_q[i][f] = s_q[k][f][es][b][i];
            }
          }

          // #pragma unroll p_Nq
          for(int a=0;a<p_Nq;++a){

            dfloat tmp[p_Nfields]  = {0.0f};

            //#pragma unroll p_Nq
            for(int i=0;i<p_Nq;++i){
              const dfloat sVia = s_invV[i][a];
              for(int f=0;f<p_Nfields;++f) {
                tmp[f]  += sVia*r_q[i][f];
              }
            }

            for(int f=0;f<p_Nfields;++f) {
              s_q[k][f][es][b][a] = tmp[f];
            }
          }
        }
      }
    }

    // transform back in c
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int b=0;b<p_Nq;++b;@inner(1)){
        for(int a=0;a<p_Nq;++a;@inner(0)){
          if(r_e<Nelements){

            // #pragma unroll p_Nq
            for(int k=0;k<p_Nq;++k){
              for(int f=0;f<p_Nfields;++f) {
                r_q[k][f] = s_q[k][f][es][b][a];
              }
            }

            // #pragma unroll p_Nq
            for(int c=0;c<p_Nq;++c){

              dfloat tmp[p_Nfields]  = {0.0f};

              //#pragma unroll p_Nq
              for(int k=0;k<p_Nq;++k){
                const dfloat sVkc = s_invV[k][c];
                for(int f=0;f<p_Nfields;++f) {
                  tmp[f]  += sVkc*r_q[k][f];
                }
              }

              for(int f=0;f<p_Nfields;++f) {
                Aq[element*p_Np*p_Nfields + f*p_Np + c*p_Nq*p_Nq + b*p_Nq + a] = tmp[f];
              }
            }//c
          }//if
        }//a
      }//b
    }//es
  }//eo
}//kernel
#endif

#if KERNEL_NUMBER==2
/*3d threadblock kernel*/
@kernel void bp4AxAffineHex3D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  wJ,
                        @restrict const  dfloat *  ggeo,
                        @restrict const  dfloat *  D,
                        @restrict const  dfloat *  I,
                        @restrict const  dfloat *  invV,
                        @restrict const  dfloat *  S,
                        @restrict const  dfloat *  MM,
                        const dfloat lambda,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){

  for(int eo=0;eo<Nelements;eo+=p_NelementsPerBlk;@outer(0)){

//padding for bank conflicts
#if p_Nq==16
#define p_pad 1
#else
#define p_pad 0
#endif

    @shared dfloat s_D [p_Nq][p_Nq+p_pad];
    @shared dfloat s_invV [p_Nq][p_Nq+p_pad];

    @shared dfloat   s_q[p_Nfields][p_NelementsPerBlk][p_Nq][p_Nq][p_Nq+p_pad];
    @shared dfloat s_Gqr[p_Nfields][p_NelementsPerBlk][p_Nq][p_Nq][p_Nq+p_pad];
    @shared dfloat s_Gqs[p_Nfields][p_NelementsPerBlk][p_Nq][p_Nq][p_Nq+p_pad];
    @shared dfloat s_Gqt[p_Nfields][p_NelementsPerBlk][p_Nq][p_Nq][p_Nq+p_pad];

    @exclusive dlong element;
    @exclusive int k, es;

    for(int ke=0;ke<p_Nq*p_NelementsPerBlk;++ke;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          //load operators
          if(ke==0){
            const int id = j*p_Nq+i;
            const dfloat Dji = D[id];
            s_D[j][i] = Dji;

            s_invV[j][i] = invV[j*p_Nq+i];
          }

          k  = ke%p_Nq;
          es = ke/p_Nq;

          if(es+eo<Nelements) {
            element = elementList[es+eo];
            for(int f=0;f<p_Nfields;++f) {
              const dlong id = GlobalToLocal[i + j*p_Nq + k*p_Nq*p_Nq + f*p_Np + element*p_Np*p_Nfields];
              s_q[f][es][k][j][i] = (id!=-1) ? q[id] : 0.0;
            }
          }
        }
      }
    }

    // interpolate in 't'
    for(int ke=0;ke<p_Nq*p_NelementsPerBlk;++ke;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          dfloat tmp[p_Nfields]={0.0};

          // #pragma unroll p_Nq
          for(int m=0;m<p_Nq;++m){
            for(int f=0;f<p_Nfields;++f) {
              tmp[f] += s_invV[k][m]*s_q[f][es][m][j][i];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            s_Gqr[f][es][k][j][i] = tmp[f];
          }
        }
      }
    }

    // interpolate in 'r'
    for(int ke=0;ke<p_Nq*p_NelementsPerBlk;++ke;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          dfloat tmp[p_Nfields] ={0.0};

          // #pragma unroll p_Nq
          for(int m=0;m<p_Nq;++m){
            const dfloat Vim = s_invV[i][m];
            for(int f=0;f<p_Nfields;++f) {
              tmp[f] += Vim*s_Gqr[f][es][k][j][m];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            s_Gqs[f][es][k][j][i] = tmp[f];
          }
        }
      }
    }

    // interpolate in 's'
    for(int ke=0;ke<p_Nq*p_NelementsPerBlk;++ke;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          dfloat tmp[p_Nfields] ={0.0};

          // #pragma unroll p_Nq
          for(int m=0;m<p_Nq;++m){
            const dfloat Vim = s_invV[j][m];
            for(int f=0;f<p_Nfields;++f) {
              tmp[f] += Vim*s_Gqs[f][es][k][m][i];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            s_q[f][es][k][j][i] = tmp[f];
          }
        }
      }
    }

    for(int ke=0;ke<p_Nq*p_NelementsPerBlk;++ke;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          if(eo+es<Nelements){
            const dfloat G00 = ggeo[p_Nggeo*element+p_G00ID];
            const dfloat G01 = ggeo[p_Nggeo*element+p_G01ID];
            const dfloat G02 = ggeo[p_Nggeo*element+p_G02ID];
            const dfloat G11 = ggeo[p_Nggeo*element+p_G11ID];
            const dfloat G12 = ggeo[p_Nggeo*element+p_G12ID];
            const dfloat G22 = ggeo[p_Nggeo*element+p_G22ID];

            dfloat dr[p_Nfields]={0.0};
            dfloat ds[p_Nfields]={0.0};
            dfloat dt[p_Nfields]={0.0};

            // 'r' terms
            // #pragma unroll p_cubUnr
            for(int m = 0; m < p_Nq; ++m) {
              const dfloat Dim = s_D[i][m];
              for(int f=0;f<p_Nfields;++f) {
                dr[f] += Dim*s_q[f][es][k][j][m];
              }
            }
            // 's' terms
            // #pragma unroll p_cubUnr
            for(int m = 0; m < p_Nq; ++m) {
              const dfloat Djm = s_D[j][m];
              for(int f=0;f<p_Nfields;++f) {
                ds[f] += Djm*s_q[f][es][k][m][i];
              }
            }
            // 't' terms
            // #pragma unroll p_cubUnr
            for(int m = 0; m < p_Nq; ++m) {
              const dfloat Dkm = s_D[k][m];
              for(int f=0;f<p_Nfields;++f) {
                dt[f] += Dkm*s_q[f][es][m][j][i];
              }
            }

            for(int f=0;f<p_Nfields;++f) {
              s_Gqr[f][es][k][j][i] = G00*dr[f] + G01*ds[f] + G02*dt[f];
              s_Gqs[f][es][k][j][i] = G01*dr[f] + G11*ds[f] + G12*dt[f];
              s_Gqt[f][es][k][j][i] = G02*dr[f] + G12*ds[f] + G22*dt[f];
            }
          }
        }
      }
    }

    for(int ke=0;ke<p_Nq*p_NelementsPerBlk;++ke;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          if(eo+es<Nelements){
            const dfloat GWJ  = wJ[element];

            dfloat tmpAp[p_Nfields] = {0.};

            // #pragma unroll p_cubUnr
            for(int m=0;m<p_Nq;++m){
              const dfloat Dmi = s_D[m][i];
              for(int f=0;f<p_Nfields;++f) {
                tmpAp[f] += Dmi*s_Gqr[f][es][k][j][m];
              }
            }
            for(int m=0;m<p_Nq;++m){
              const dfloat Dmj = s_D[m][j];
              for(int f=0;f<p_Nfields;++f) {
                tmpAp[f] += Dmj*s_Gqs[f][es][k][m][i];
              }
            }

            // #pragma unroll p_cubUnr
            for(int m=0;m<p_Nq;++m){
              const dfloat Dmk = s_D[m][k];
              for(int f=0;f<p_Nfields;++f) {
                tmpAp[f] += Dmk*s_Gqt[f][es][m][j][i];
              }
            }

            for(int f=0;f<p_Nfields;++f) {
              tmpAp[f] += s_q[f][es][k][j][i]*lambda*GWJ;
            }

            for(int f=0;f<p_Nfields;++f) {
              s_q[f][es][k][j][i] = tmpAp[f];
            }
          }
        }
      }
    }

    // test in 's'
    for(int ke=0;ke<p_Nq*p_NelementsPerBlk;++ke;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          dfloat tmp[p_Nfields]={0.0};

          // #pragma unroll p_cubUnr
          for(int m=0;m<p_Nq;++m){
            const dfloat Imj = s_invV[m][j];
            for(int f=0;f<p_Nfields;++f) {
              tmp[f] += Imj*s_q[f][es][k][m][i];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            s_Gqr[f][es][k][j][i] = tmp[f];
          }
        }
      }
    }

    // test in 'r'
    for(int ke=0;ke<p_Nq*p_NelementsPerBlk;++ke;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          dfloat tmp[p_Nfields]={0.0};

          // #pragma unroll p_cubUnr
          for(int m=0;m<p_Nq;++m){
            const dfloat Imj = s_invV[m][i];
            for(int f=0;f<p_Nfields;++f) {
              tmp[f] += Imj*s_Gqr[f][es][k][j][m];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            s_Gqs[f][es][k][j][i] = tmp[f];
          }
        }
      }
    }

    // test in 't'
    for(int ke=0;ke<p_Nq*p_NelementsPerBlk;++ke;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          if(eo+es<Nelements){
            dfloat tmp[p_Nfields]={0.0};

            // #pragma unroll p_cubUnr
            for(int m=0;m<p_Nq;++m){
              for(int f=0;f<p_Nfields;++f) {
                tmp[f] += s_invV[m][k]*s_Gqs[f][es][m][j][i];
              }
            }

            const dlong base = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np*p_Nfields;
            for(int f=0;f<p_Nfields;++f) {
              Aq[base+f*p_Np] = tmp[f];
            }
          }
        }
      }
    }
  }
}
#endif


#if KERNEL_NUMBER==3

/*MFMA 4x4 2D threadblock kernel*/
@kernel void bp4AxAffineHex3D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  wJ,
                        @restrict const  dfloat *  ggeo,
                        @restrict const  dfloat *  D,
                        @restrict const  dfloat *  I,
                        @restrict const  dfloat *  invV,
                        @restrict const  dfloat *  S,
                        @restrict const  dfloat *  MM,
                        const dfloat lambda,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){

  for(int e=0;e<Nelements;e++;@outer(0)){

//padding for bank conflicts
#define p_pad 1

    @shared dfloat s_invV[16][16+p_pad];
    @shared dfloat s_D[16][16+p_pad];

    @shared dfloat s_q[16][p_Nfields][16][16+p_pad];
    @shared dfloat s_qr[p_Nfields][16][16+p_pad];
    @shared dfloat s_qs[p_Nfields][16][16+p_pad];

    @exclusive dfloat r_q[p_Nq][p_Nfields];
    @exclusive dfloat r_qt[p_Nfields];

    @exclusive dlong element;

    for(int b=0;b<16;++b;@inner(1)){
      for(int a=0;a<16;++a;@inner(0)){

        s_invV[b][a] = (a<p_Nq && b<p_Nq) ? invV[a+p_Nq*b] : 0.0;
        s_D[b][a] = (a<p_Nq && b<p_Nq) ? D[b*p_Nq+a] : 0.0;

        element = elementList[e];

        // load q
        const dlong base = a + b*p_Nq + element*p_Np*p_Nfields;

        //#pragma unroll p_Nq
        for(int f=0;f<p_Nfields;++f) {
          for(int c=0;c<p_Nq;++c) {
            const dlong id = (a<p_Nq && b<p_Nq) ? GlobalToLocal[base + f*p_Np + c*p_Nq*p_Nq] : -1;
            s_q[c][f][b][a] = (id!=-1) ? q[id] : 0.0;
          }
        }
      }
    }


    //============== interpolate in 3 dir ========================
    // b --> a --> c
    for(int c=0;c<16;++c;@inner(1)){
      for(int a=0;a<16;++a;@inner(0)){

        // #pragma unroll p_Nq
        for(int b=0;b<p_Nq;++b){
          for(int f=0;f<p_Nfields;++f) {
            r_q[b][f] = s_q[c][f][b][a];
          }
        }

        // #pragma unroll p_Nq
        for(int j=0;j<p_Nq;++j){

          dfloat tmp[p_Nfields] = {0};

          // #pragma unroll p_Nq
          for(int b=0;b<p_Nq;++b){
            for(int f=0;f<p_Nfields;++f) {
              tmp[f] += s_invV[j][b]*r_q[b][f];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            s_q[c][f][j][a] = tmp[f];
          }
        }
      }
    }

    //transform in a
    for(int c=0;c<16;++c;@inner(1)){
      for(int j=0;j<16;++j;@inner(0)){

        // #pragma unroll p_Nq
        for(int a=0;a<p_Nq;++a){
          for(int f=0;f<p_Nfields;++f) {
            r_q[a][f] = s_q[c][f][j][a];
          }
        }

        // #pragma unroll p_Nq
        for(int i=0;i<p_Nq;++i){

          dfloat tmp[p_Nfields] = {0};

          //#pragma unroll p_Nq
          for(int a=0;a<p_Nq;++a){
            for(int f=0;f<p_Nfields;++f) {
              tmp[f] += s_invV[i][a]*r_q[a][f];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            s_q[c][f][j][i] = tmp[f];
          }
        }
      }
    }

    // transform in c
    for(int j=0;j<16;++j;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){

        // #pragma unroll p_Nq
        for(int c=0;c<p_Nq;++c){
          for(int f=0;f<p_Nfields;++f) {
            r_q[c][f] = s_q[c][f][j][i];
          }
        }

        // #pragma unroll p_Nq
        for(int k=0;k<p_Nq;++k){

          dfloat tmp[p_Nfields] = {0};

          //#pragma unroll p_Nq
          for(int c=0;c<p_Nq;++c){
            for(int f=0;f<p_Nfields;++f) {
              tmp[f]  += s_invV[k][c]*r_q[c][f];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            s_q[k][f][j][i] = tmp[f]; // ok since only this thread
          }
        }

        // #pragma unroll p_Nq
        for(int k=0; k<p_Nq; ++k){
          for(int f=0;f<p_Nfields;++f) {
            r_q[k][f]=0.0f;
          }
        }
      }
    }

    //===============now differentiate once interpolated
    for(int k=0; k<p_Nq; ++k) {

      for(int j=0; j<16; ++j; @inner(1)) {
        for(int i=0; i<16; ++i; @inner(0)) {
          //geofactors for k j i thread
          const dfloat r_GwJ = wJ[element];

          const dfloat r_G00 = ggeo[p_Nggeo*element+p_G00ID];
          const dfloat r_G01 = ggeo[p_Nggeo*element+p_G01ID];
          const dfloat r_G02 = ggeo[p_Nggeo*element+p_G02ID];

          const dfloat r_G11 = ggeo[p_Nggeo*element+p_G11ID];
          const dfloat r_G12 = ggeo[p_Nggeo*element+p_G12ID];
          const dfloat r_G22 = ggeo[p_Nggeo*element+p_G22ID];

          // now, put together dq/dr, qq/ds, dq/dt and dq/dI
          dfloat dr[p_Nfields] = {0.0f};
          dfloat ds[p_Nfields] = {0.0f};
          dfloat dt[p_Nfields] = {0.0f};

          for (int m=0;m<p_Nq;m+=4) {
            const dfloat r_D = s_D[i][m+(j%4)]; //replicated 16 columns and 4 rows of D in each wave
            for(int f=0;f<p_Nfields;++f) {
              const dfloat r_q = s_q[k][f][(i%4)+4*(j/4)][m+(j%4)]; //replicated 4x4 matrix of dofs
              dr[f] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_q, r_D, dr[f], 0, 0, 0);
            }
          }

          for (int m=0;m<p_Nq;m+=4) {
            const dfloat r_D = s_D[i%4+4*(j/4)][m+j%4];//replicated 4x4 submatrix of D
            for(int f=0;f<p_Nfields;++f) {
              const dfloat r_q = s_q[k][f][m+j%4][i]; //replicated 16 x-slices and 4 y-slices of q in each wave
              ds[f] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_D, r_q, ds[f], 0, 0, 0);
            }
          }

          for (int m=0;m<p_Nq;m++) {
            for(int f=0;f<p_Nfields;++f) {
              dt[f] += s_D[k][m]*s_q[m][f][j][i];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            s_qr[f][j][i] = r_G00*dr[f] + r_G01*ds[f] + r_G02*dt[f];
            s_qs[f][j][i] = r_G01*dr[f] + r_G11*ds[f] + r_G12*dt[f];
            r_qt[f] = r_G02*dr[f] + r_G12*ds[f] + r_G22*dt[f];

            r_q[k][f] += lambda*r_GwJ*s_q[k][f][j][i];
          }
        }
      }

      // weak diff
      for(int j=0;j<16;++j;@inner(1)){
        for(int i=0;i<16;++i;@inner(0)){
          dfloat r_qk[p_Nfields]={0.0};

          for (int m=0;m<p_Nq;m+=4) {
            const dfloat r_D = s_D[m+(j%4)][i]; //replicated 16 columns and 4 rows of D in each wave
            for(int f=0;f<p_Nfields;++f) {
              const dfloat r_q = s_qr[f][(i%4)+4*(j/4)][m+(j%4)]; //replicated 4x4 matrix of dofs
              r_qk[f] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_q, r_D, r_qk[f], 0, 0, 0);
            }
          }

          for (int m=0;m<p_Nq;m+=4) {
            const dfloat r_D = s_D[m+j%4][i%4+4*(j/4)];//replicated 4x4 submatrix of D
            for(int f=0;f<p_Nfields;++f) {
              const dfloat r_q = s_qs[f][m+j%4][i]; //replicated 16 x-slices and 4 y-slices of q in each wave
              r_qk[f] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_D, r_q, r_qk[f], 0, 0, 0);
            }
          }

          //#pragma unroll p_Nq
          for(int n=0;n<p_Nq;++n){
            for(int f=0;f<p_Nfields;++f) {
              r_q[n][f] += s_D[k][n]*r_qt[f];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            r_q[k][f] += r_qk[f];
          }
        }
      }
    }//k

    //Loop 7
    for(int j=0;j<16;++j;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){

        // #pragma unroll p_Nq
        for(int k=0; k<p_Nq; ++k) {
          for(int f=0;f<p_Nfields;++f) {
            s_q[k][f][j][i] = r_q[k][f];
          }
        }
      }
    }

    //=========== now project =================================================
    // b -> c -> a

    // transform back in b
    for(int k=0;k<16;++k;@inner(1)){
      for(int i=0;i<16;++i;@inner(0)){

        // #pragma unroll p_Nq
        for(int j=0;j<p_Nq;++j){
          for(int f=0;f<p_Nfields;++f) {
            r_q[j][f] = s_q[k][f][j][i];
          }
        }

        // #pragma unroll p_Nq
        for(int b=0;b<p_Nq;++b){

          dfloat tmp[p_Nfields] = {0.0f};

          //#pragma unroll p_Nq
          for(int j=0;j<p_Nq;++j){
            for(int f=0;f<p_Nfields;++f) {
              tmp[f]  += s_invV[j][b]*r_q[j][f];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            s_q[k][f][b][i] = tmp[f];
          }
        }
      }
    }

    // transform back in a
    for(int k=0;k<16;++k;@inner(1)){
      for(int b=0;b<16;++b;@inner(0)){
        // #pragma unroll p_Nq
        for(int i=0;i<p_Nq;++i){
          for(int f=0;f<p_Nfields;++f) {
            r_q[i][f] = s_q[k][f][b][i];
          }
        }

        // #pragma unroll p_Nq
        for(int a=0;a<p_Nq;++a){

          dfloat tmp[p_Nfields]  = {0.0f};

          //#pragma unroll p_Nq
          for(int i=0;i<p_Nq;++i){
            for(int f=0;f<p_Nfields;++f) {
              tmp[f]  += s_invV[i][a]*r_q[i][f];
            }
          }

          for(int f=0;f<p_Nfields;++f) {
            s_q[k][f][b][a] = tmp[f];
          }
        }
      }
    }

    // transform back in c
    for(int b=0;b<16;++b;@inner(1)){
      for(int a=0;a<16;++a;@inner(0)){

        if (a<p_Nq && b<p_Nq) {
          // #pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){
            for(int f=0;f<p_Nfields;++f) {
              r_q[k][f] = s_q[k][f][b][a];
            }
          }

          // #pragma unroll p_Nq
          for(int c=0;c<p_Nq;++c){

            dfloat tmp[p_Nfields]  = {0.0f};

            //#pragma unroll p_Nq
            for(int k=0;k<p_Nq;++k){
              for(int f=0;f<p_Nfields;++f) {
                tmp[f]  += s_invV[k][c]*r_q[k][f];
              }
            }

            for(int f=0;f<p_Nfields;++f) {
              Aq[element*p_Np*p_Nfields + f*p_Np + c*p_Nq*p_Nq + b*p_Nq + a] = tmp[f];
            }
          }
        }//c
      }//a
    }//b
  }//e
}//kernel
#endif

