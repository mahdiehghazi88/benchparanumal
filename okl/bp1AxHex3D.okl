/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

#if KERNEL_NUMBER==0
/*q in shmem*/

//padding for bank conflicts
#if p_cubNq==16
#define p_pad 1
#else
#define p_pad 0
#endif


@kernel void bp1AxHex3D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  cubwJ,
                        @restrict const  dfloat *  I,
                        @restrict const  dfloat *  MM,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){


  for(dlong eo=0; eo<Nelements; eo+=p_NelementsPerBlk; @outer(0)){

    @shared dfloat s_I[p_cubNq][p_Nq+p_pad];
    @shared dfloat s_q[p_cubNq][p_NelementsPerBlk][p_cubNq][p_cubNq+p_pad];

    @exclusive dlong r_e, element;

    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int b=0;b<p_cubNq;++b;@inner(1)){
        for(int a=0;a<p_cubNq;++a;@inner(0)){

          if(es==0 && a<p_Nq)
            s_I[b][a] = I[a+p_Nq*b];

          r_e = eo + es;

          if(r_e<Nelements) {
            element = elementList[r_e];

            if (a<p_Nq && b<p_Nq){
              // load pencil of u into register
              const dlong base = a + b*p_Nq + element*p_Np;

              // #pragma unroll p_Nq
              for(int c=0;c<p_Nq;++c) {
                const dlong id = GlobalToLocal[base + c*p_Nq*p_Nq];
                s_q[c][es][b][a] = (id!=-1) ? q[id] : 0.0;
              }
            }
          }
        }
      }
    }

    // transform in b
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int c=0;c<p_cubNq;++c;@inner(1)){
        for(int a=0;a<p_cubNq;++a;@inner(0)){

          dfloat r_q[p_cubNq];

          if(a<p_Nq && c<p_Nq){

            // #pragma unroll p_Nq
            for(int b=0;b<p_Nq;++b)
              r_q[b] = s_q[c][es][b][a];

            // #pragma unroll p_Nq
            for(int j=0;j<(p_cubNq+1)/2;++j){

              dfloat tmp = 0;
              dfloat tmp2 = 0;

              // #pragma unroll p_Nq
              for(int b=0;b<p_Nq;++b){

                const dfloat tmpI = s_I[j][b];

                tmp  += tmpI*r_q[b];
                tmp2 += tmpI*r_q[p_Nq-1-b];
              }

              s_q[c][es][j][a] = tmp; // ok since only this thread
              s_q[c][es][p_cubNq-1-j][a] = tmp2;
            }
          }
        }
      }
    }

    // transform in a
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int c=0;c<p_cubNq;++c;@inner(1)){
        for(int j=0;j<p_cubNq;++j;@inner(0)){

          dfloat r_q[p_cubNq];

          if(c<p_Nq){

            // #pragma unroll p_Nq
            for(int a=0;a<p_Nq;++a)
              r_q[a] = s_q[c][es][j][a];

            // #pragma unroll p_Nq
            for(int i=0;i<(p_cubNq+1)/2;++i){

              dfloat tmp = 0;
              dfloat tmp2 = 0;

              // #pragma unroll p_Nq
              for(int a=0;a<p_Nq;++a){

                const dfloat tmpI = s_I[i][a];

                tmp += tmpI*r_q[a];
                tmp2+= tmpI*r_q[p_Nq-1-a];
              }

              s_q[c][es][j][i] = tmp;
              s_q[c][es][j][p_cubNq-1-i] = tmp2;
            }
          }
        }
      }
    }

    // transform in c
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){

          dfloat r_q[p_cubNq];

          // #pragma unroll p_Nq
          for(int c=0;c<p_Nq;++c)
            r_q[c] = s_q[c][es][j][i];

          // #pragma unroll p_Nq
          for(int k=0;k<(p_cubNq+1)/2;++k){

            dfloat r_GwJ;
            dfloat r_GwJ2;
            if (r_e<Nelements) {
              const dlong id  = element*p_cubNp+k*p_cubNq*p_cubNq+j*p_cubNq+i;
              const dlong id2 = element*p_cubNp+(p_cubNq-1-k)*p_cubNq*p_cubNq+j*p_cubNq+i;
              r_GwJ  = cubwJ[id ];
              r_GwJ2 = cubwJ[id2];
            }

            dfloat tmp = 0;
            dfloat tmp2 = 0;

            // #pragma unroll p_Nq
            for(int c=0;c<p_Nq;++c){

              const dfloat tmpI = s_I[k][c];

              tmp  += tmpI*r_q[c];
              tmp2 += tmpI*r_q[p_Nq-1-c];
            }

            s_q[k][es][j][i] = r_GwJ*tmp; // ok since only this thread
            s_q[p_cubNq-k-1][es][j][i] = r_GwJ2*tmp2;
          }
        }
      }
    }

    // transform back in b
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int k=0;k<p_cubNq;++k;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){

          dfloat r_q[p_cubNq];

          // #pragma unroll p_cubNq
          for(int j=0;j<p_cubNq;++j)
            r_q[j] = s_q[k][es][j][i];

          // #pragma unroll p_Nq
          for(int b=0;b<(p_Nq+1)/2;++b){
            dfloat tmp = 0;
            dfloat tmp2 = 0;

            // #pragma unroll p_cubNq
            for(int j=0;j<p_cubNq;++j){

              const dfloat tmpI = s_I[j][b];

              tmp += tmpI*r_q[j] ;
              tmp2 += tmpI*r_q[p_cubNq-1-j];
            }

            s_q[k][es][b][i] = tmp; // ok since only this thread
            s_q[k][es][p_Nq-1-b][i] = tmp2;
          }
        }
      }
    }

    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int k=0;k<p_cubNq;++k;@inner(1)){
        for(int b=0;b<p_cubNq;++b;@inner(0)){

          dfloat r_q[p_cubNq];

          if(b<p_Nq){

            // #pragma unroll p_cubNq
            for(int i=0;i<p_cubNq;++i)
              r_q[i] = s_q[k][es][b][i];

            // #pragma unroll p_cubNq
            for(int a=0;a<(p_Nq+1)/2;++a){

              dfloat tmp = 0;
              dfloat tmp2 = 0;

              // #pragma unroll p_cubNq
              for(int i=0;i<p_cubNq;++i){

                dfloat tmpI = s_I[i][a];

                tmp += tmpI*r_q[i] ;
                tmp2 += tmpI*r_q[p_cubNq-1-i];
              }

              s_q[k][es][b][a] = tmp; // ok since only this thread
              s_q[k][es][b][p_Nq-1-a] = tmp2;
            }
          }
        }
      }
    }

    // transform back in c
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int b=0;b<p_cubNq;++b;@inner(1)){
        for(int a=0;a<p_cubNq;++a;@inner(0)){

          dfloat r_q[p_cubNq];

          if(r_e<Nelements && a<p_Nq && b<p_Nq){

            // #pragma unroll p_cubNq
            for(int k=0;k<p_cubNq;++k)
              r_q[k] = s_q[k][es][b][a];

            // #pragma unroll p_cubNq
            for(int c=0;c<(p_Nq+1)/2;++c){

              dfloat tmp = 0;
              dfloat tmp2 = 0;

              // #pragma unroll p_cubNq
              for(int k=0;k<p_cubNq;++k){

                const dfloat tmpI = s_I[k][c];

                tmp += tmpI*r_q[k] ;
                tmp2 += tmpI*r_q[p_cubNq-1-k];
              }

              Aq[element*p_Np+c*p_Nq*p_Nq+b*p_Nq+a] = tmp;
              Aq[element*p_Np+(p_Nq-1-c)*p_Nq*p_Nq+b*p_Nq+a] = tmp2;
            }
          }
        }
      }
    }
  }
}
#endif


#if KERNEL_NUMBER==1
/*Layer by layer with q in regs*/

//padding for bank conflicts
#if p_cubNq==16
#define p_pad 1
#else
#define p_pad 0
#endif

@kernel void bp1AxHex3D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  cubwJ,
                        @restrict const  dfloat *  I,
                        @restrict const  dfloat *  MM,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){

  for(dlong eo=0; eo<Nelements; eo+=p_NelementsPerBlk; @outer(0)){

    @shared dfloat s_I[p_cubNq][p_Nq+p_pad];
    @shared dfloat s_q[p_NelementsPerBlk][p_cubNq][p_cubNq+p_pad];

    @exclusive dlong element;

    // register array to hold q(i,j,0:N) private to thread
    @exclusive dfloat r_q[p_Nq];
    // array for results Iq(i,j,0:N)
    @exclusive dfloat r_Iq[p_cubNq];

    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int b=0;b<p_cubNq;++b;@inner(1)){
        for(int a=0;a<p_cubNq;++a;@inner(0)){

          if(es==0 && a<p_Nq)
            s_I[b][a] = I[a+p_Nq*b];

          const dlong e = eo + es;

          if(e<Nelements) {
            element = elementList[e];

            if (a<p_Nq && b<p_Nq){
              // load pencil of u into register
              const dlong base = a + b*p_Nq + element*p_Np;

              // #pragma unroll p_Nq
              for(int c=0;c<p_Nq;++c) {
                const dlong id = GlobalToLocal[base + c*p_Nq*p_Nq];
                r_q[c] = (id!=-1) ? q[id] : 0.0;
              }
            }
          } else {
            element = -1;
          }

          for(int k=0;k<p_cubNq;++k) {
            r_Iq[k] = 0.;
          }
        }
      }
    }

    // Layer by layer
    for(int k=0; k<p_Nq; k++){

      for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
        for(int b=0;b<p_cubNq;++b;@inner(1)){
          for(int a=0;a<p_cubNq;++a;@inner(0)){
            // load a layer of q into shmem
            s_q[es][b][a] = r_q[k];
          }
        }
      }

      @exclusive dfloat Iq;

      // transform in a
      for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
        for(int b=0;b<p_cubNq;++b;@inner(1)){
          for(int a=0;a<p_cubNq;++a;@inner(0)){

            Iq = 0.;

            if(b<p_Nq){
              // #pragma unroll p_Nq
              for(int m=0;m<p_Nq;++m){
                Iq += s_I[a][m]*s_q[es][b][m];
              }
            }
          }
        }
      }

      for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
        for(int b=0;b<p_cubNq;++b;@inner(1)){
          for(int a=0;a<p_cubNq;++a;@inner(0)){
            // load a layer of q into shmem
            s_q[es][b][a] = Iq;
          }
        }
      }

      // transform in b
      for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
        for(int b=0;b<p_cubNq;++b;@inner(1)){
          for(int a=0;a<p_cubNq;++a;@inner(0)){

            Iq = 0.;

            // #pragma unroll p_Nq
            for(int m=0;m<p_Nq;++m){
              Iq += s_I[b][m]*s_q[es][m][a];
            }

            // accumulate into z pencil
            for (int m=0;m<p_cubNq;m++) {
              r_Iq[m] += s_I[m][k]*Iq;
            }
          }
        }
      }
    }


    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int b=0;b<p_cubNq;++b;@inner(1)){
        for(int a=0;a<p_cubNq;++a;@inner(0)){

          for(int k=0;k<p_Nq;++k){
            r_q[k] = 0.;
          }

          /*Multiply by geofactor*/
          for(int c=0;c<p_cubNq;++c){
            const dfloat r_GwJ = (element>-1) ? cubwJ[element*p_cubNp+c*p_cubNq*p_cubNq+b*p_cubNq+a] : 0.;
            r_Iq[c] *= r_GwJ;

            // Project down in c
            for(int m=0;m<p_Nq;++m){
              r_q[m] += s_I[c][m]*r_Iq[c];
            }

            r_Iq[c] = 0.;
          }
        }
      }
    }

    // Layer by layer
    for(int k=0; k<p_Nq; k++){

      for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
        for(int b=0;b<p_cubNq;++b;@inner(1)){
          for(int a=0;a<p_cubNq;++a;@inner(0)){
            // load a layer of q into shmem
            s_q[es][b][a] = r_q[k];
          }
        }
      }

      @exclusive dfloat Iq;

      // transform back in b
      for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
        for(int b=0;b<p_cubNq;++b;@inner(1)){
          for(int a=0;a<p_cubNq;++a;@inner(0)){

            Iq = 0.;

            if(b<p_Nq){
              // #pragma unroll p_Nq
              for(int m=0;m<p_cubNq;++m){
                Iq += s_I[m][b]*s_q[es][m][a];
              }
            }
          }
        }
      }

      for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
        for(int b=0;b<p_cubNq;++b;@inner(1)){
          for(int a=0;a<p_cubNq;++a;@inner(0)){
            // load layer back into shmem
            s_q[es][b][a] = Iq;
          }
        }
      }

      // transform back in a
      for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
        for(int b=0;b<p_cubNq;++b;@inner(1)){
          for(int a=0;a<p_cubNq;++a;@inner(0)){

            Iq = 0.;

            if(b<p_Nq && a<p_Nq){
              // #pragma unroll p_Nq
              for(int m=0;m<p_cubNq;++m){
                Iq += s_I[m][a]*s_q[es][b][m];
              }

              r_q[k] = Iq;
            }
          }
        }
      }
    }

    // write out
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int b=0;b<p_cubNq;++b;@inner(1)){
        for(int a=0;a<p_cubNq;++a;@inner(0)){
          if(element>-1 && a<p_Nq && b<p_Nq){
            for(int k=0;k<p_Nq;++k){
              Aq[element*p_Np+k*p_Nq*p_Nq+b*p_Nq+a] = r_q[k];
            }
          }
        }
      }
    }
  }
}
#endif

#if KERNEL_NUMBER==2
/*MFMA 4x4 with q in shmem*/

//padding for bank conflicts
#define p_pad 1

@kernel void bp1AxHex3D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  cubwJ,
                        @restrict const  dfloat *  I,
                        @restrict const  dfloat *  MM,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){


  for(dlong e=0; e<Nelements; e++; @outer(0)){

    @shared dfloat s_I[16][16+p_pad];
    @shared dfloat s_q[16][16][16+p_pad];

    @exclusive dlong element;

    @exclusive dfloat r_Iq[p_cubNq];

    for(int b=0;b<16;++b;@inner(1)){
      for(int a=0;a<16;++a;@inner(0)){

        s_I[b][a] = (a<p_Nq && b<p_cubNq) ? I[b*p_Nq+a] : 0.0;

        element = elementList[e];

        const dlong base = a + b*p_Nq + element*p_Np;

        for(int c=0;c<p_Nq;++c) {
          const dlong id = (a<p_Nq && b<p_Nq) ? GlobalToLocal[base + c*p_Nq*p_Nq] : -1;
          s_q[c][b][a] = (id!=-1) ? q[id] : 0.0;
        }
      }
    }

    // transform in a
    for(int b=0;b<16;++b;@inner(1)){
      for(int a=0;a<16;++a;@inner(0)){

        for (int k=0;k<p_Nq;++k) {
          r_Iq[k] = {0.};
        }

        for (int m=0;m<p_Nq;m+=4) {
          const dfloat r_I = s_I[a][m+(b%4)]; //replicated 16 columns and 4 rows of I in each wave
          for (int k=0;k<p_Nq;++k) {
            const dfloat r_q = s_q[k][(a%4)+4*(b/4)][m+(b%4)]; //replicated 4x4 matrix of dofs
            r_Iq[k] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_q, r_I, r_Iq[k], 0, 0, 0);
          }
        }
      }
    }

    for(int b=0;b<16;++b;@inner(1)){
      for(int a=0;a<16;++a;@inner(0)){
        for (int k=0;k<p_Nq;++k) {
          s_q[k][b][a] = r_Iq[k];
        }
      }
    }

    // transform in c
    for(int b=0;b<16;++b;@inner(1)){
      for(int a=0;a<16;++a;@inner(0)){

        for (int k=0;k<p_Nq;++k) {
          r_Iq[k] = {0.};
        }

        for (int m=0;m<p_Nq;m+=4) {
          const dfloat r_I = s_I[a%4+4*(b/4)][m+b%4];//replicated 4x4 submatrix of I
          for (int k=0;k<p_Nq;++k) {
            const dfloat r_q = s_q[m+b%4][k][a]; //replicated 16 x-slices and 4 y-slices of q in each wave
            r_Iq[k] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_I, r_q, r_Iq[k], 0, 0, 0);
          }
        }
      }
    }

    for(int b=0;b<16;++b;@inner(1)){
      for(int a=0;a<16;++a;@inner(0)){
        for (int k=0;k<p_Nq;++k) {
          s_q[b][k][a] = r_Iq[k];
        }
      }
    }

    // transform in b
    for(int b=0;b<16;++b;@inner(1)){
      for(int a=0;a<16;++a;@inner(0)){

        dfloat GWJ[p_cubNq];

        const dlong gbase = element*p_cubNp + a + b*p_cubNq;
        for(int c=0;c<p_cubNq;++c){
          GWJ[c] = (a<p_cubNq && b<p_cubNq) ? cubwJ[gbase + c*p_cubNq*p_cubNq] : 0.;
        }

        for (int c=0;c<p_cubNq;++c) {
          r_Iq[c] = {0.};
        }

        for (int m=0;m<p_Nq;m+=4) {
          const dfloat r_I = s_I[a%4+4*(b/4)][m+b%4];//replicated 4x4 submatrix of I
          for (int c=0;c<p_cubNq;++c) {
            const dfloat r_q = s_q[c][m+b%4][a]; //replicated 16 x-slices and 4 y-slices of q in each wave
            r_Iq[c] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_I, r_q, r_Iq[c], 0, 0, 0);
          }
        }

        for (int c=0;c<p_cubNq;++c) {
          r_Iq[c] *= GWJ[c];
        }
      }
    }

    for(int b=0;b<16;++b;@inner(1)){
      for(int a=0;a<16;++a;@inner(0)){
        for (int c=0;c<p_cubNq;++c) {
          s_q[c][b][a] = r_Iq[c];
        }
      }
    }

    // transform back in b
    for(int b=0;b<16;++b;@inner(1)){
      for(int a=0;a<16;++a;@inner(0)){
        for (int c=0;c<p_cubNq;++c) {
          r_Iq[c] = {0.};
        }

        for (int m=0;m<p_cubNq;m+=4) {
          const dfloat r_I = s_I[m+b%4][a%4+4*(b/4)];//replicated 4x4 submatrix of I
          for (int c=0;c<p_cubNq;++c) {
            const dfloat r_q = s_q[c][m+b%4][a]; //replicated 16 x-slices and 4 y-slices of q in each wave
            r_Iq[c] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_I, r_q, r_Iq[c], 0, 0, 0);
          }
        }
      }
    }

    for(int b=0;b<16;++b;@inner(1)){
      for(int a=0;a<16;++a;@inner(0)){
        for (int c=0;c<p_cubNq;++c) {
          s_q[c][b][a] = r_Iq[c];
        }
      }
    }


    // transform back in c
    for(int b=0;b<16;++b;@inner(1)){
      for(int a=0;a<16;++a;@inner(0)){

        for (int k=0;k<p_Nq;++k) {
          r_Iq[k] = {0.};
        }

        for (int m=0;m<p_cubNq;m+=4) {
          const dfloat r_I = s_I[m+b%4][a%4+4*(b/4)];//replicated 4x4 submatrix of I
          for (int k=0;k<p_Nq;++k) {
            const dfloat r_q = s_q[m+b%4][k][a]; //replicated 16 x-slices and 4 y-slices of q in each wave
            r_Iq[k] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_I, r_q, r_Iq[k], 0, 0, 0);
          }
        }
      }
    }

    for(int b=0;b<16;++b;@inner(1)){
      for(int a=0;a<16;++a;@inner(0)){
        for (int k=0;k<p_Nq;++k) {
          s_q[b][k][a] = r_Iq[k];
        }
      }
    }

    // transform back in a
    for(int b=0;b<16;++b;@inner(1)){
      for(int a=0;a<16;++a;@inner(0)){

        for (int k=0;k<p_Nq;++k) {
          r_Iq[k] = {0.};
        }

        for (int m=0;m<p_cubNq;m+=4) {
          const dfloat r_I = s_I[m+(b%4)][a]; //replicated 16 columns and 4 rows of I in each wave
          for (int k=0;k<p_Nq;++k) {
            const dfloat r_q = s_q[k][(a%4)+4*(b/4)][m+(b%4)]; //replicated 4x4 matrix of dofs
            r_Iq[k] = __builtin_amdgcn_mfma_f64_4x4x4f64(r_q, r_I, r_Iq[k], 0, 0, 0);
          }
        }

        if(a<p_Nq && b<p_Nq){
          for (int k=0;k<p_Nq;++k) {
            Aq[element*p_Np+k*p_Nq*p_Nq+b*p_Nq+a] = r_Iq[k];
          }
        }
      }
    }
  }
}
#endif

#if KERNEL_NUMBER==3
/*MFMA 4x4 layer by layer with q in regs*/

//padding for bank conflicts
#if p_cubNq==16
#define p_pad 1
#else
#define p_pad 0
#endif

@kernel void bp1AxHex3D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  cubwJ,
                        @restrict const  dfloat *  I,
                        @restrict const  dfloat *  MM,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){

  for(dlong e=0; e<Nelements; e++; @outer(0)){

    @shared dfloat s_I[16][16+p_pad];
    @shared dfloat s_q[16][16+p_pad];

    @exclusive dlong element;

    // register array to hold q(i,j,0:N) private to thread
    @exclusive dfloat r_q[p_Nq];
    // array for results Iq(i,j,0:N)
    @exclusive dfloat r_Iq[p_cubNq];

    for(int b=0;b<16;++b;@inner(1)){
      for(int a=0;a<16;++a;@inner(0)){

        s_I[b][a] = (a<p_Nq && b<p_cubNq) ? I[a+p_Nq*b] : 0.;

        element = elementList[e];

        // load pencil of u into register
        const dlong base = a + b*p_Nq + element*p_Np;

        for(int k=0;k<p_Nq;++k) {
          const dlong id = (a<p_Nq && b<p_Nq) ? GlobalToLocal[base + k*p_Nq*p_Nq] : -1;
          r_q[k] = (id!=-1) ? q[id] : 0.0;
        }

        for(int c=0;c<p_cubNq;++c) {
          r_Iq[c] = 0.;
        }
      }
    }

    // Layer by layer
    for(int k=0; k<p_Nq; k++){

      for(int b=0;b<16;++b;@inner(1)){
        for(int a=0;a<16;++a;@inner(0)){
          // load a layer of q into shmem
          s_q[b][a] = r_q[k];
        }
      }

      @exclusive dfloat Iq;

      // transform in a
      for(int b=0;b<16;++b;@inner(1)){
        for(int a=0;a<16;++a;@inner(0)){

          Iq = 0.;

          for (int m=0;m<p_Nq;m+=4) {
            const dfloat r_I = s_I[a][m+(b%4)]; //replicated 16 columns and 4 rows of I in each wave
            const dfloat r_q = s_q[(a%4)+4*(b/4)][m+(b%4)]; //replicated 4x4 matrix of dofs
            Iq = __builtin_amdgcn_mfma_f64_4x4x4f64(r_q, r_I, Iq, 0, 0, 0);
          }
        }
      }

      for(int b=0;b<16;++b;@inner(1)){
        for(int a=0;a<16;++a;@inner(0)){
          // load layer back into shmem
          s_q[b][a] = Iq;
        }
      }

      // transform in b
      for(int b=0;b<16;++b;@inner(1)){
        for(int a=0;a<16;++a;@inner(0)){

          Iq = 0.;

          for (int m=0;m<p_Nq;m+=4) {
            const dfloat r_I = s_I[a%4+4*(b/4)][m+b%4];//replicated 4x4 submatrix of I
            const dfloat r_q = s_q[m+b%4][a]; //replicated 16 x-slices and 4 y-slices of q in each wave
            Iq = __builtin_amdgcn_mfma_f64_4x4x4f64(r_I, r_q, Iq, 0, 0, 0);
          }

          // accumulate into z pencil
          for (int m=0;m<p_cubNq;m++) {
            r_Iq[m] += s_I[m][k]*Iq;
          }
        }
      }
    }


    for(int b=0;b<16;++b;@inner(1)){
      for(int a=0;a<16;++a;@inner(0)){

        for(int k=0;k<p_Nq;++k){
          r_q[k] = 0.;
        }

        /*Multiply by geofactor*/
        for(int c=0;c<p_cubNq;++c){
          const dfloat r_GwJ = (a<p_cubNq && b<p_cubNq) ? cubwJ[element*p_cubNp+c*p_cubNq*p_cubNq+b*p_cubNq+a] : 0.;
          r_Iq[c] *= r_GwJ;

          // Project down in c
          for(int m=0;m<p_Nq;++m){
            r_q[m] += s_I[c][m]*r_Iq[c];
          }

          r_Iq[c] = 0.;
        }
      }
    }

    // Layer by layer
    for(int k=0; k<p_Nq; k++){

      for(int b=0;b<16;++b;@inner(1)){
        for(int a=0;a<16;++a;@inner(0)){
          // load a layer of q into shmem
          s_q[b][a] = r_q[k];
        }
      }

      @exclusive dfloat Iq;

      // transform back in b
      for(int b=0;b<16;++b;@inner(1)){
        for(int a=0;a<16;++a;@inner(0)){

          Iq = 0.;

          for (int m=0;m<p_cubNq;m+=4) {
            const dfloat r_I = s_I[m+b%4][a%4+4*(b/4)];//replicated 4x4 submatrix of I
            const dfloat r_q = s_q[m+b%4][a]; //replicated 16 x-slices and 4 y-slices of q in each wave
            Iq = __builtin_amdgcn_mfma_f64_4x4x4f64(r_I, r_q, Iq, 0, 0, 0);
          }
        }
      }

      for(int b=0;b<16;++b;@inner(1)){
        for(int a=0;a<16;++a;@inner(0)){
          // load layer back into shmem
          s_q[b][a] = Iq;
        }
      }

      // transform back in a
      for(int b=0;b<16;++b;@inner(1)){
        for(int a=0;a<16;++a;@inner(0)){

          Iq = 0.;

          for (int m=0;m<p_cubNq;m+=4) {
            const dfloat r_I = s_I[m+(b%4)][a]; //replicated 16 columns and 4 rows of I in each wave
            const dfloat r_q = s_q[(a%4)+4*(b/4)][m+(b%4)]; //replicated 4x4 matrix of dofs
            Iq = __builtin_amdgcn_mfma_f64_4x4x4f64(r_q, r_I, Iq, 0, 0, 0);
          }

          r_q[k] = Iq;
        }
      }
    }

    // write out
    for(int b=0;b<16;++b;@inner(1)){
      for(int a=0;a<16;++a;@inner(0)){
        if(a<p_Nq && b<p_Nq){
          for(int k=0;k<p_Nq;++k){
            Aq[element*p_Np+k*p_Nq*p_Nq+b*p_Nq+a] = r_q[k];
          }
        }
      }
    }
  }
}

#endif
