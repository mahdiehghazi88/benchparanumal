/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

#if KERNEL_NUMBER==0
/*original kernel*/
@kernel void bp2AxTri2D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  cubwJ,
                        @restrict const  dfloat *  I,
                        @restrict const  dfloat *  MM,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){

  for(int e=0;e<Nelements;e++;@outer(0)){

    @shared dfloat  s_q[p_Nfields][p_cubNp];

    @exclusive dlong element;

    for(int n=0;n<p_cubNp;++n;@inner(0)){

      element = elementList[e];

      if (n<p_Np) {
        for(int f=0;f<p_Nfields;++f) {
          const dlong id = GlobalToLocal[n + f*p_Np + element*p_Np*p_Nfields];
          s_q[f][n] = (id!=-1) ? q[id] : 0.0;
        }
      }
    }

    @exclusive dfloat Iq[p_Nfields];

    for(int n=0;n<p_cubNp;++n;@inner(0)){

      for(int f=0;f<p_Nfields;++f) {
        Iq[f] = 0.0;
      }

      for(int m=0;m<p_Np;++m){
        const dfloat Im = I[n + m*p_cubNp];
        for(int f=0;f<p_Nfields;++f) {
          Iq[f] += Im * s_q[f][m];
        }
      }
    }

    for(int n=0;n<p_cubNp;++n;@inner(0)){
      const dlong gbase = element*p_cubNp + n;
      const dfloat GWJ = cubwJ[gbase];

      for(int f=0;f<p_Nfields;++f) {
        s_q[f][n] = GWJ*Iq[f];
      }
    }

    for(int n=0;n<p_cubNp;++n;@inner(0)){

      if (n<p_Np) {
        dfloat Mq[p_Nfields] = {0.0};

        for(int m=0;m<p_cubNp;++m){
          const dfloat ITm = I[m + n*p_cubNp];
          for(int f=0;f<p_Nfields;++f) {
            Mq[f] += ITm * s_q[f][m];
          }
        }

        const dlong base = n + element*p_Np*p_Nfields;
        for(int f=0;f<p_Nfields;++f) {
          Aq[base+f*p_Np] = Mq[f];
        }
      }
    }
  }
}
#endif

#if KERNEL_NUMBER==1
/*SIMD packing with I in shared memory*/
@kernel void bp2AxTri2D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  cubwJ,
                        @restrict const  dfloat *  I,
                        @restrict const  dfloat *  MM,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){

  for(int eo=0;eo<Nelements;eo+=p_NelementsPerBlk*p_NelementsPerThd;@outer(0)){

    @shared dfloat  s_I[p_Np][p_cubNp];
    @shared dfloat  s_q[p_NelementsPerThd][p_Nfields][p_NelementsPerBlk][p_cubNp];

    @exclusive dlong element[p_NelementsPerThd];

    for(int ei=0;ei<p_NelementsPerBlk;++ei;@inner(1)){
      for(int n=0;n<p_cubNp;++n;@inner(0)){

        for (int m=ei;m<p_Np;m+=p_NelementsPerBlk) {
          s_I[m][n] = I[n + m*p_cubNp];
        }

        for (int et = 0; et<p_NelementsPerThd;++et) {

          const dlong e = eo + ei*p_NelementsPerThd + et;

          if (e<Nelements) {
            element[et] = elementList[e];

            if (n<p_Np) {
              for(int f=0;f<p_Nfields;++f) {
                const dlong id = GlobalToLocal[n + f*p_Np + element[et]*p_Np*p_Nfields];
                s_q[et][f][ei][n] = (id!=-1) ? q[id] : 0.0;
              }
            }
          } else {
            element[et] = -1;
          }
        }
      }
    }

    @exclusive dfloat Iq[p_NelementsPerThd][p_Nfields];

    for(int ei=0;ei<p_NelementsPerBlk;++ei;@inner(1)){
      for(int n=0;n<p_cubNp;++n;@inner(0)){

        dfloat r_GWJ[p_NelementsPerThd];
        for (int et = 0; et<p_NelementsPerThd;++et) {
          r_GWJ[et] = (element[et]>-1) ? cubwJ[element[et]*p_cubNp + n] : 0.0;
        }

        for (int et = 0; et<p_NelementsPerThd;++et) {
          for(int f=0;f<p_Nfields;++f) {
            Iq[et][f] = 0.0;
          }
        }

        for(int m=0;m<p_Np;++m){
          const dfloat Im = s_I[m][n];
          for (int et = 0; et<p_NelementsPerThd;++et) {
            for(int f=0;f<p_Nfields;++f) {
              Iq[et][f] += Im * s_q[et][f][ei][m];
            }
          }
        }

        for (int et = 0; et<p_NelementsPerThd;++et) {
          for(int f=0;f<p_Nfields;++f) {
            Iq[et][f] *= r_GWJ[et];
          }
        }
      }
    }

    for(int ei=0;ei<p_NelementsPerBlk;++ei;@inner(1)){
      for(int n=0;n<p_cubNp;++n;@inner(0)){
        for (int et = 0; et<p_NelementsPerThd;++et) {
          for(int f=0;f<p_Nfields;++f) {
            s_q[et][f][ei][n] = Iq[et][f];
          }
        }
      }
    }

    for(int ei=0;ei<p_NelementsPerBlk;++ei;@inner(1)){
      for(int n=0;n<p_cubNp;++n;@inner(0)){

        if (n<p_Np) {
          for (int et = 0; et<p_NelementsPerThd;++et) {
            for(int f=0;f<p_Nfields;++f) {
              Iq[et][f] = 0.0;
            }
          }

          for(int m=0;m<p_cubNp;++m){
            const dfloat ITm = s_I[n][m];
            for (int et = 0; et<p_NelementsPerThd;++et) {
              for(int f=0;f<p_Nfields;++f) {
                Iq[et][f] += ITm * s_q[et][f][ei][m];
              }
            }
          }

          for (int et = 0; et<p_NelementsPerThd;++et) {
            if (element[et]>-1) {
              for(int f=0;f<p_Nfields;++f) {
                Aq[n + f*p_Np + element[et]*p_Np*p_Nfields] = Iq[et][f];
              }
            }
          }
        }
      }
    }
  }
}
#endif

#if KERNEL_NUMBER==2
/*SIMD packing with I not in shared memory*/
@kernel void bp2AxTri2D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  cubwJ,
                        @restrict const  dfloat *  I,
                        @restrict const  dfloat *  MM,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){

  for(int eo=0;eo<Nelements;eo+=p_NelementsPerBlk*p_NelementsPerThd;@outer(0)){

    @shared dfloat  s_q[p_NelementsPerThd][p_Nfields][p_NelementsPerBlk][p_cubNp];

    @exclusive dlong element[p_NelementsPerThd];

    for(int ei=0;ei<p_NelementsPerBlk;++ei;@inner(1)){
      for(int n=0;n<p_cubNp;++n;@inner(0)){

        for (int et = 0; et<p_NelementsPerThd;++et) {

          const dlong e = eo + ei*p_NelementsPerThd + et;

          if (e<Nelements) {
            element[et] = elementList[e];

            if (n<p_Np) {
              for(int f=0;f<p_Nfields;++f) {
                const dlong id = GlobalToLocal[n + f*p_Np + element[et]*p_Np*p_Nfields];
                s_q[et][f][ei][n] = (id!=-1) ? q[id] : 0.0;
              }
            }
          } else {
            element[et] = -1;
          }
        }
      }
    }

    @exclusive dfloat Iq[p_NelementsPerThd][p_Nfields];

    for(int ei=0;ei<p_NelementsPerBlk;++ei;@inner(1)){
      for(int n=0;n<p_cubNp;++n;@inner(0)){

        dfloat r_GWJ[p_NelementsPerThd];
        for (int et = 0; et<p_NelementsPerThd;++et) {
          r_GWJ[et] = (element[et]>-1) ? cubwJ[element[et]*p_cubNp + n] : 0.0;
        }

        for (int et = 0; et<p_NelementsPerThd;++et) {
          for(int f=0;f<p_Nfields;++f) {
            Iq[et][f] = 0.0;
          }
        }

        for(int m=0;m<p_Np;++m){
          const dfloat Im = I[m*p_cubNp+n];
          for (int et = 0; et<p_NelementsPerThd;++et) {
            for(int f=0;f<p_Nfields;++f) {
              Iq[et][f] += Im * s_q[et][f][ei][m];
            }
          }
        }

        for (int et = 0; et<p_NelementsPerThd;++et) {
          for(int f=0;f<p_Nfields;++f) {
            Iq[et][f] *= r_GWJ[et];
          }
        }
      }
    }

    for(int ei=0;ei<p_NelementsPerBlk;++ei;@inner(1)){
      for(int n=0;n<p_cubNp;++n;@inner(0)){
        for (int et = 0; et<p_NelementsPerThd;++et) {
          for(int f=0;f<p_Nfields;++f) {
            s_q[et][f][ei][n] = Iq[et][f];
          }
        }
      }
    }

    for(int ei=0;ei<p_NelementsPerBlk;++ei;@inner(1)){
      for(int n=0;n<p_cubNp;++n;@inner(0)){

        if (n<p_Np) {
          for (int et = 0; et<p_NelementsPerThd;++et) {
            for(int f=0;f<p_Nfields;++f) {
              Iq[et][f] = 0.0;
            }
          }

          for(int m=0;m<p_cubNp;++m){
            const dfloat ITm = I[n*p_cubNp+m];
            for (int et = 0; et<p_NelementsPerThd;++et) {
              for(int f=0;f<p_Nfields;++f) {
                Iq[et][f] += ITm * s_q[et][f][ei][m];
              }
            }
          }

          for (int et = 0; et<p_NelementsPerThd;++et) {
            if (element[et]>-1) {
              for(int f=0;f<p_Nfields;++f) {
                Aq[n + f*p_Np + element[et]*p_Np*p_Nfields] = Iq[et][f];
              }
            }
          }
        }
      }
    }
  }
}
#endif

#if KERNEL_NUMBER==3
/*MFMA 16x16*/
@kernel void bp2AxTri2D(const dlong Nelements,
                        @restrict const  dlong  *  elementList,
                        @restrict const  dlong  *  GlobalToLocal,
                        @restrict const  dfloat *  cubwJ,
                        @restrict const  dfloat *  I,
                        @restrict const  dfloat *  MM,
                        @restrict const  dfloat *  q,
                              @restrict dfloat *  Aq){

  for(int eo=0;eo<Nelements;eo+=16;@outer(0)){

    @shared dfloat  s_q[p_Nfields][16][p_cubNp];

    @exclusive dlong element[4];

    for(int w=0;w<((p_cubNp-1)/16)+1;++w;@inner(2)){
      for(int ly=0;ly<4;++ly;@inner(1)){
        for(int lx=0;lx<16;++lx;@inner(0)){

          const int n = lx + 16*w;

          for (int i=0;i<4;++i) {
            const dlong e = eo + ly + 4*i;
            if (e<Nelements) {
              element[i] = elementList[e];
              for(int f=0;f<p_Nfields;++f) {
                const dlong id = (n<p_Np) ? GlobalToLocal[n + f*p_Np + element[i]*p_Np*p_Nfields] : -1;
                s_q[f][ly+4*i][n] = (id!=-1) ? q[id] : 0.0;
              }
            } else {
              element[i] = -1;
              for(int f=0;f<p_Nfields;++f) {
                s_q[f][ly+4*i][n] = 0.0;
              }
            }
          }
        }
      }
    }

    @exclusive __attribute__((__vector_size__(4 * 8))) double Iq[p_Nfields];

    for(int w=0;w<((p_cubNp-1)/16)+1;++w;@inner(2)){
      for(int ly=0;ly<4;++ly;@inner(1)){
        for(int lx=0;lx<16;++lx;@inner(0)){

          const int n = lx + 16*w;

          dfloat r_GWJ[4];
          for (int i = 0; i<4;++i) {
            r_GWJ[i] = (element[i]>-1 && n<p_cubNp) ? cubwJ[element[i]*p_cubNp + n] : 0.0;
          }

          for(int f=0;f<p_Nfields;++f) {
            for (int i = 0; i<4;++i) {
              Iq[f][i] = 0.0;
            }
          }

          dfloat r_I = (n<p_cubNp && (ly)<p_Np) ? I[n + (ly)*p_cubNp] : 0.0; //16 rows and 4 columns of I

          for(int m=0;m<p_Np;m+=4){ //multiply 4 DOFs over each element in each MFMA
            const dfloat r_I_next = (n<p_cubNp && (m+4+ly)<p_Np) ? I[n + (m+4+ly)*p_cubNp] : 0.0; //16 rows and 4 columns of I

            for(int f=0;f<p_Nfields;++f) {
              const dfloat r_q  = ((m+ly)<p_Np) ? s_q[f][lx][m+ly] : 0.0; //4 DOFs from 16 elements
              // Iq += r_q^T * r_I
              Iq[f] = __builtin_amdgcn_mfma_f64_16x16x4f64(r_q, r_I, Iq[f], 0, 0, 0);
            }

            r_I = r_I_next;
          }

          //Iq is 16x16. Columns (i.e. lx) increment dofs, and rows (ly + 4*i) increment elements

          for(int f=0;f<p_Nfields;++f) {
            for (int i = 0; i<4;++i) {
              Iq[f][i] *= r_GWJ[i];
            }
          }
        }
      }
    }

    for(int w=0;w<((p_cubNp-1)/16)+1;++w;@inner(2)){
      for(int ly=0;ly<4;++ly;@inner(1)){
        for(int lx=0;lx<16;++lx;@inner(0)){
          for (int i = 0; i<4;++i) {
            const int n = lx + 16*w;
            if (n < p_cubNp) {
              for(int f=0;f<p_Nfields;++f) {
                s_q[f][ly+4*i][n] = Iq[f][i];
              }
            }
          }
        }
      }
    }

    for(int w=0;w<((p_cubNp-1)/16)+1;++w;@inner(2)){
      for(int ly=0;ly<4;++ly;@inner(1)){
        for(int lx=0;lx<16;++lx;@inner(0)){

          const int n = lx + 16*w;

          dfloat r_I = ((ly)<p_cubNp && (n)<p_Np) ? I[(ly) + (n)*p_cubNp] : 0.0; //16 rows and 4 columns of I

          for(int f=0;f<p_Nfields;++f) {
            for (int i = 0; i<4;++i) {
              Iq[f][i] = 0.0;
            }
          }

          for(int m=0;m<p_cubNp;m+=4){ //multiply 4 DOFs over each element in each MFMA
            const dfloat r_I_next = ((m+4+ly)<p_cubNp && n<p_Np) ? I[(m+4+ly)+n*p_cubNp] : 0.0; //16 rows and 4 columns of I

            for(int f=0;f<p_Nfields;++f) {
              const dfloat r_q  = ((m+ly)<p_cubNp) ? s_q[f][lx][m+ly] : 0.0; //4 DOFs from 16 elements

              // Iq += r_q^T * r_I
              Iq[f] = __builtin_amdgcn_mfma_f64_16x16x4f64(r_q, r_I, Iq[f], 0, 0, 0);
            }

            r_I = r_I_next;
          }

          //Iq is 16x16. Columns (i.e. lx) increment dofs, and rows (ly + 4*i) increment elements

          if (n < p_Np) {
            for (int i=0;i<4;++i) {
              if (element[i]>-1) {
                for(int f=0;f<p_Nfields;++f) {
                  Aq[n + f*p_Np + element[i]*p_Np*p_Nfields] = Iq[f][i];
                }
              }
            }
          }
        }
      }
    }
  }
}
#endif
